<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>ConciseJS Blog</title>
        <link>https://concisejs.github.io/blog</link>
        <description>ConciseJS Blog</description>
        <lastBuildDate>Wed, 02 Mar 2022 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[代码检测规则]]></title>
            <link>https://concisejs.github.io/blog/code-detection-rules</link>
            <guid>code-detection-rules</guid>
            <pubDate>Wed, 02 Mar 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[ConciseJS 项目分别通过 ESLint 和 StyleLint 来检查 ECMAScript/JavaScript 和 CSS/SCSS 代码是否符合规则。]]></description>
            <content:encoded><![CDATA[<p>ConciseJS 项目分别通过 ESLint 和 StyleLint 来检查 ECMAScript/JavaScript 和 CSS/SCSS 代码是否符合规则。</p><p>ESLint 是一个用于在 ECMAScript/JavaScript 代码中识别和报告模式匹配的工具， StyleLint 是一个 CSS/SCSS 代码检查工具，它们的目的是保证代码的一致性和避免错误，了解这些规则有助于更好的理解规则报告中的问题。</p><p>下面列出了全部 eslint 及其插件（ eslint-plugin-react 、 @typescript-eslint/eslint-plugin ）和 stylelint 的规则，通常所有规则默认都是禁用的。</p><p>如果在配置文件中，使用了 <code>&quot;extends&quot;: [&quot;eslint:recommended&quot;, &quot;plugin:react/recommended&quot;, &quot;plugin:@typescript-eslint/recommended&quot;]</code> 或 <code>&quot;extends&quot;: &quot;stylelint-config-standard&quot;</code> 来启用推荐的规则，则这些推荐规则都带有一个 :heavy_check_mark: 。</p><p>如果规则报告的某些问题可通过命令行 <code>--fix</code> 选型自动修复，则这些规则都带有一个 :wrench: 。</p><p>如果规则报告的某些问题需要通过编辑并建议手动修复，则这些规则都带有一个 :bulb: 。</p><h2>eslint</h2><h3>possible errors</h3><p>这些规则可能与 JavaScript 代码中的逻辑错误有关。</p><table><thead><tr><th>标记</th><th>规则名称</th><th>规则说明</th></tr></thead><tbody><tr><td></td><td><a href="https://eslint.org/docs/rules/array-callback-return">array-callback-return</a></td><td>强制在数组方法的回调中执行 return 语句</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/constructor-super">constructor-super</a></td><td>需要在构造函数中调用 super()</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/for-direction">for-direction</a></td><td>强制 &quot;for&quot; 循环中更新子句的计数器朝着正确的方向移动</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/getter-return">getter-return</a></td><td>强制 getter 函数中出现 return 语句</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-async-promise-executor">no-async-promise-executor</a></td><td>禁止使用异步函数作为 Promise 执行器</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-await-in-loop">no-await-in-loop</a></td><td>禁止在循环中使用 await 语句</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-class-assign">no-class-assign</a></td><td>禁止修改作为类名的变量</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-compare-neg-zero">no-compare-neg-zero</a></td><td>禁止与 -0 进行比较</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-cond-assign">no-cond-assign</a></td><td>禁止条件判断中使用赋值运算符</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-const-assign">no-const-assign</a></td><td>禁止对 const 声明的常量进行修改</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-constant-condition">no-constant-condition</a></td><td>禁止在条件中使用常量表达式</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-constructor-return">no-constructor-return</a></td><td>禁止从构造函数中返回值</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-control-regex">no-control-regex</a></td><td>禁止在正则表达式中使用控制字符</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-debugger">no-debugger</a></td><td>禁用 debugger</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-dupe-args">no-dupe-args</a></td><td>禁止 function 定义中出现重名参数</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-dupe-class-members">no-dupe-class-members</a></td><td>禁止定义重复的类名</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-dupe-else-if">no-dupe-else-if</a></td><td>禁止 if-else-if 链中出现相同的条件</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-dupe-keys">no-dupe-keys</a></td><td>禁止对象字面量中出现重复的 key</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-duplicate-case">no-duplicate-case</a></td><td>禁止出现重复的 case 标签</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-duplicate-imports">no-duplicate-imports</a></td><td>禁止重复的模块引入</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-empty-character-class">no-empty-character-class</a></td><td>禁止在正则表达式中使用空字符集</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-empty-pattern">no-empty-pattern</a></td><td>禁止空的解构赋值</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-ex-assign">no-ex-assign</a></td><td>禁止对 catch 子句的参数重新赋值</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-fallthrough">no-fallthrough</a></td><td>禁止 case 语句中出现失败</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-func-assign">no-func-assign</a></td><td>禁止对 function 声明重新赋值</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-import-assign">no-import-assign</a></td><td>禁止重复给引入模块进行绑定</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-inner-declarations">no-inner-declarations</a></td><td>禁止在嵌套的块中出现变量声明或 function 声明</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-invalid-regexp">no-invalid-regexp</a></td><td>禁止 RegExp 构造函数中存在无效的正则表达式字符串</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-irregular-whitespace">no-irregular-whitespace</a></td><td>禁止不规则的空白</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-loss-of-precision">no-loss-of-precision</a></td><td>禁止数字符号失去精度</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-misleading-character-class">no-misleading-character-class</a></td><td>不允许在字符类语法中出现由多个代码点组成的字符</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-new-symbol">no-new-symbol</a></td><td>禁止 new 声明 Symbol 对象</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-obj-calls">no-obj-calls</a></td><td>禁止将全局对象属性作为函数调用</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-promise-executor-return">no-promise-executor-return</a></td><td>禁止从 Promise 执行器函数中返回值</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-prototype-builtins">no-prototype-builtins</a></td><td>禁止直接调用 Object.prototypes 的内置属性</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-self-assign">no-self-assign</a></td><td>禁止赋值两边完全相同</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-self-compare">no-self-compare</a></td><td>禁止比较中的两侧完全相同</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-setter-return">no-setter-return</a></td><td>禁止从设置中返回任何值</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-sparse-arrays">no-sparse-arrays</a></td><td>禁止稀疏数组</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-template-curly-in-string">no-template-curly-in-string</a></td><td>禁止在常规字符串中出现模板字面量占位符语法</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-this-before-super">no-this-before-super</a></td><td>禁止在构造函数中调用 super() 之前使用 this/super</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-undef">no-undef</a></td><td>禁止使用未声明的变量，除非它在 /<em>global</em>/ 注释中被提及</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-unexpected-multiline">no-unexpected-multiline</a></td><td>禁止混淆多行表达式</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-unmodified-loop-condition">no-unmodified-loop-condition</a></td><td>禁止未修改的循环条件</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-unreachable">no-unreachable</a></td><td>禁止在 return、throw、continue 和 break 语句之后出现不可达代码</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-unreachable-loop">no-unreachable-loop</a></td><td>禁止带有仅允许一次的主体循环</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-unsafe-finally">no-unsafe-finally</a></td><td>禁止在 finally 语句块中出现控制流语句</td></tr><tr><td>:heavy_check_mark:<!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:bulb:</td><td><a href="https://eslint.org/docs/rules/no-unsafe-negation">no-unsafe-negation</a></td><td>禁止对关系运算符的左操作数使用否定操作符</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-unsafe-optional-chaining">no-unsafe-optional-chaining</a></td><td>禁止在不允许使用 undefined 值的上下文中使用可选链接</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-unused-private-class-members">no-unused-private-class-members</a></td><td>禁止未使用的私有类成员</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-unused-vars">no-unused-vars</a></td><td>禁止未使用的变量</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-use-before-define">no-use-before-define</a></td><td>禁止在变量定义之前将其使用</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-useless-backreference">no-useless-backreference</a></td><td>禁止在正则表达式中使用无用的反向引用</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/require-atomic-updates">require-atomic-updates</a></td><td>禁止由于 await 或 yield的使用而可能导致出现竞态条件的赋值</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/use-isnan">use-isnan</a></td><td>要求使用 isNaN() 检查 NaN</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/valid-typeof">valid-typeof</a></td><td>强制 typeof 表达式与有效的字符串进行比较</td></tr></tbody></table><h3>suggestions</h3><p>这些规则给出了一些替代方式的的建议。</p><table><thead><tr><th>标记</th><th>规则名称</th><th>规则说明</th></tr></thead><tbody><tr><td></td><td><a href="https://eslint.org/docs/rules/accessor-pairs">accessor-pairs</a></td><td>强制 getter 和 setter 在对象中成对出现</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/arrow-body-style">arrow-body-style</a></td><td>要求箭头函数体周围有{}</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/block-scoped-var">block-scoped-var</a></td><td>强制把变量的使用限制在其定义的作用域范围内</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/camelcase">camelcase</a></td><td>强制执行驼峰命名约定</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/capitalized-comments">capitalized-comments</a></td><td>强制或禁止注释首字母大写</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/class-methods-use-this">class-methods-use-this</a></td><td>强制类方法使用 this</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/complexity">complexity</a></td><td>指定程序中允许的最大环路复杂度</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/consistent-return">consistent-return</a></td><td>要求 return 语句要么总是指定返回的值，要么不指定</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/consistent-this">consistent-this</a></td><td>在捕获当前执行上下文时强制执行一致的命名</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/curly">curly</a></td><td>强制所有控制语句使用一致的括号风格</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/default-case">default-case</a></td><td>要求 switch 语句中有 default 分支</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/default-case-last">default-case-last</a></td><td>强制 switch 语句中的默认子句放在最后</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/default-param-last">default-param-last</a></td><td>强制将默认参数放在最后</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/dot-notation">dot-notation</a></td><td>强制尽可能地使用点号</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/eqeqeq">eqeqeq</a></td><td>要求使用 === 和 !==</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/func-name-matching">func-name-matching</a></td><td>要求函数名称和分配给它们的变量或属性名称相匹配</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/func-names">func-names</a></td><td>要求或禁止以 function 命名的表达式</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/func-style">func-style</a></td><td>强制持续使用 function 声明或表达式</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/grouped-accessor-pairs">grouped-accessor-pairs</a></td><td>要求在对象文字和类中分组存取器成对出现</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/guard-for-in">guard-for-in</a></td><td>要求 for-in 循环中有一个 if 语句</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/id-denylist">id-denylist</a></td><td>禁止指定的标识符</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/id-length">id-length</a></td><td>强制最小和最大的标识符长度</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/id-match">id-match</a></td><td>要求标识符匹配指定的正则表达式</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/init-declarations">init-declarations</a></td><td>要求或禁止在变量声明中初始化</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/max-classes-per-file">max-classes-per-file</a></td><td>强制每个文件中包含的的类的最大数量</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/max-depth">max-depth</a></td><td>强制模块可以嵌套的最大深度</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/max-lines">max-lines</a></td><td>强制每个文件的最大行数</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/max-lines-per-function">max-lines-per-function</a></td><td>强制在一个函数中执行最多代码行数</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/max-nested-callbacks">max-nested-callbacks</a></td><td>强制回调可以嵌套的最大深度</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/max-params">max-params</a></td><td>强制执行在函数定义中最大数量的函数</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/max-statements">max-statements</a></td><td>强制执行在函数模块中最大数量的函数</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/multiline-comment-style">multiline-comment-style</a></td><td>为多行注释强制执行特定样式</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/new-cap">new-cap</a></td><td>需要构造函数名称以大写字母开头</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-alert">no-alert</a></td><td>禁用 alert、confirm 和 prompt</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-array-constructor">no-array-constructor</a></td><td>禁用 Array 构造函数</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-bitwise">no-bitwise</a></td><td>禁用按位运算符</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-caller">no-caller</a></td><td>禁用 arguments.caller 或 arguments.callee</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-case-declarations">no-case-declarations</a></td><td>禁用 case 子句中使用词法声明</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/no-confusing-arrow">no-confusing-arrow</a></td><td>禁止在箭头函数可能与比较混淆的地方使用箭头函数</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-console">no-console</a></td><td>禁用 console</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-continue">no-continue</a></td><td>禁用 continue 语句</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-delete-var">no-delete-var</a></td><td>禁止删除变量</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/no-div-regex">no-div-regex</a></td><td>禁止除法操作符显式的出现在正则表达式开始的位置</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/no-else-return">no-else-return</a></td><td>禁止 if 语句中 return 语句之后有 else 块</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-empty">no-empty</a></td><td>禁止空块语句</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-empty-function">no-empty-function</a></td><td>禁止出现空函数</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-eq-null">no-eq-null</a></td><td>禁止在没有类型检查操作符的情况下与 null 进行比较</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-eval">no-eval</a></td><td>禁用 eval()</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-extend-native">no-extend-native</a></td><td>禁止扩展原生类型</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/no-extra-bind">no-extra-bind</a></td><td>禁止对 .bind() 的补必要调用</td></tr><tr><td>:heavy_check_mark: :wrench:</td><td><a href="https://eslint.org/docs/rules/no-extra-boolean-cast">no-extra-boolean-cast</a></td><td>禁止不必要的布尔类型转换</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/no-extra-label">no-extra-label</a></td><td>禁用不必要的标签</td></tr><tr><td>:heavy_check_mark: :wrench:</td><td><a href="https://eslint.org/docs/rules/no-extra-semi">no-extra-semi</a></td><td>禁用不必要的分号</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/no-floating-decimal">no-floating-decimal</a></td><td>禁止数字字面量中使用前导和末尾小数点</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-global-assign">no-global-assign</a></td><td>禁止对原生对象或只读的全局对象进行赋值</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/no-implicit-coercion">no-implicit-coercion</a></td><td>禁止使用短符号进行类型转换</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-implicit-globals">no-implicit-globals</a></td><td>禁止在全局范围内使用变量声明和 function 声明</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-implied-eval">no-implied-eval</a></td><td>禁止使用类似 eval() 的方法</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-inline-comments">no-inline-comments</a></td><td>禁止代码后的内联注释</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-invalid-this">no-invalid-this</a></td><td>禁止 this 关键字出现在类和类对象之外</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-iterator">no-iterator</a></td><td>禁用 <code>__iterator__ </code> 属性</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-label-var">no-label-var</a></td><td>禁用与变量共名的标签</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-labels">no-labels</a></td><td>禁用标签语句</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-lone-blocks">no-lone-blocks</a></td><td>禁用不必要的嵌套块</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/no-lonely-if">no-lonely-if</a></td><td>禁止将 if 语句作为 else 模块中的唯一的语句</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-loop-func">no-loop-func</a></td><td>禁止在循环语句中出现包含不安全引用的函数声明</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-magic-numbers">no-magic-numbers</a></td><td>禁用魔术数字</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-mixed-operators">no-mixed-operators</a></td><td>禁止混用二元运算符</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-multi-assign">no-multi-assign</a></td><td>禁用链式赋值表达式</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-multi-str">no-multi-str</a></td><td>禁用多行字符串</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-negated-condition">no-negated-condition</a></td><td>禁用否定条件</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-nested-ternary">no-nested-ternary</a></td><td>禁止嵌套三目运算符</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-new">no-new</a></td><td>禁止使用 new 以避免产生副作用</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-new-func">no-new-func</a></td><td>禁止对 Function 对象使用 new 操作符</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-new-object">no-new-object</a></td><td>禁止 Object 构造函数</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-new-wrappers">no-new-wrappers</a></td><td>禁止对 String，Number 和 Boolean 使用 new 操作符</td></tr><tr><td>:heavy_check_mark:<!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:bulb:</td><td><a href="https://eslint.org/docs/rules/no-nonoctal-decimal-escape">no-nonoctal-decimal-escape</a></td><td>禁用字符串文字中的 \8 和 \9 转义序列</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-octal">no-octal</a></td><td>禁用八进制字面量</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-octal-escape">no-octal-escape</a></td><td>禁止在字符串中使用八进制转义序列</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-param-reassign">no-param-reassign</a></td><td>禁止对 function 的参数进行重新赋值</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-plusplus">no-plusplus</a></td><td>禁用一元运算符 ++ 或 --</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-proto">no-proto</a></td><td>禁用 <code>__proto__</code> 属性</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-redeclare">no-redeclare</a></td><td>禁止多次声明同一变量</td></tr><tr><td>:heavy_check_mark:<!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:bulb:</td><td><a href="https://eslint.org/docs/rules/no-regex-spaces">no-regex-spaces</a></td><td>禁止在正则表达式中使用多个空格</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-restricted-exports">no-restricted-exports</a></td><td>禁止在导出中指定名称</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-restricted-globals">no-restricted-globals</a></td><td>禁止指定全局变量</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-restricted-imports">no-restricted-imports</a></td><td>由 import 加载时禁止指定模块</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-restricted-properties">no-restricted-properties</a></td><td>禁止使用对象的某些属性</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-restricted-syntax">no-restricted-syntax</a></td><td>不允许指定特殊的语法</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-return-assign">no-return-assign</a></td><td>禁止在 return 语句中使用赋值语句</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-return-await">no-return-await</a></td><td>禁用不必要的 return await</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-script-url">no-script-url</a></td><td>禁止 javascript:  url</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-sequences">no-sequences</a></td><td>禁用逗号操作符</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-shadow">no-shadow</a></td><td>禁止在外部作用域中声明的隐藏变量中进行变量声明</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-shadow-restricted-names">no-shadow-restricted-names</a></td><td>禁止标识符遮蔽受限名称</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-ternary">no-ternary</a></td><td>禁止三元运算符</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-throw-literal">no-throw-literal</a></td><td>禁止抛出异常字面量</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/no-undef-init">no-undef-init</a></td><td>禁止将变量初始化为 undefined</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-undefined">no-undefined</a></td><td>禁止使用 undefined 作为标识符</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-underscore-dangle">no-underscore-dangle</a></td><td>禁止标识符中使用悬空下划线</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/no-unneeded-ternary">no-unneeded-ternary</a></td><td>当存在更简单的替代方案时，不允许使用三元运算符</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-unused-expressions">no-unused-expressions</a></td><td>禁止出现未使用过的表达式</td></tr><tr><td>:heavy_check_mark: :wrench:</td><td><a href="https://eslint.org/docs/rules/no-unused-labels">no-unused-labels</a></td><td>禁用出现未使用过的标</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-useless-call">no-useless-call</a></td><td>禁止不必要的 .call() 和 .apply()</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-useless-catch">no-useless-catch</a></td><td>禁止不必要的 catch 子句</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/no-useless-computed-key">no-useless-computed-key</a></td><td>禁止对象和类中不必要的计算属性key</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-useless-concat">no-useless-concat</a></td><td>禁止不必要的字符串字面量或模板字面量的连接</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-useless-constructor">no-useless-constructor</a></td><td>禁止不必要的构造函数</td></tr><tr><td>:heavy_check_mark:<!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:bulb:</td><td><a href="https://eslint.org/docs/rules/no-useless-escape">no-useless-escape</a></td><td>禁用不必要的转义字符</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/no-useless-rename">no-useless-rename</a></td><td>禁止将导入、导出和解构的分配重命名为相同的名称</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/no-useless-return">no-useless-return</a></td><td>禁止多余的 return 语句</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/no-var">no-var</a></td><td>要求使用 let 或 const 而不是 var</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-void">no-void</a></td><td>禁用 void 操作符</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-warning-comments">no-warning-comments</a></td><td>禁止在注释中使用特定的警告术语</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-with">no-with</a></td><td>禁用 with 语句</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/object-shorthand">object-shorthand</a></td><td>要求或禁止对象字面量的方法和属性简写语法</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/one-var">one-var</a></td><td>强制变量在函数中一起或单独声明</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/one-var-declaration-per-line">one-var-declaration-per-line</a></td><td>要求或禁止变量声明周围的换行符</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/operator-assignment">operator-assignment</a></td><td>尽可能要求或禁止赋值运算符简写</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/prefer-arrow-callback">prefer-arrow-callback</a></td><td>需要使用箭头函数进行回调</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/prefer-const">prefer-const</a></td><td>要求声明后从不重新分配的变量的 const 声明</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/prefer-destructuring">prefer-destructuring</a></td><td>要求从数组和/或对象中解构</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/prefer-exponentiation-operator">prefer-exponentiation-operator</a></td><td>禁止使用 <code>Math.pow</code> 支持 <code>**</code> 运算符</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/prefer-named-capture-group">prefer-named-capture-group</a></td><td>建议在正则表达式中使用命名捕获组</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/prefer-numeric-literals">prefer-numeric-literals</a></td><td>禁止 parseInt() 和 Number.parseInt() 支持二进制、八进制和十六进制文字</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/prefer-object-has-own">prefer-object-has-own</a></td><td>禁止使用 Object.prototype.hasOwnProperty.call() 而更喜欢使用 Object.hasOwn()</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/prefer-object-spread">prefer-object-spread</a></td><td>禁止使用 Object.assign 和对象文字作为第一个参数，而是更喜欢使用对象扩展</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/prefer-promise-reject-errors">prefer-promise-reject-errors</a></td><td>要求使用 Error 对象作为 Promise 拒绝的原因</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:bulb:</td><td><a href="https://eslint.org/docs/rules/prefer-regex-literals">prefer-regex-literals</a></td><td>禁止使用 RegExp 构造函数来支持正则表达式文字</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/prefer-rest-params">prefer-rest-params</a></td><td>需要其他参数代替  arguments</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/prefer-spread">prefer-spread</a></td><td>需要扩展运算符代替 .apply()</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/require-yield">require-yield</a></td><td>要求生成器函数包含 yield</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/sort-imports">sort-imports</a></td><td>在模块中强制执行排序的导入声明</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/sort-keys">sort-keys</a></td><td>需要对对象键进行排序</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/sort-vars">sort-vars</a></td><td>要求对同一声明块中的变量进行排序</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/spaced-comment">spaced-comment</a></td><td>在注释中的 // 或 /* 之后强制保持一致的间距</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/strict">strict</a></td><td>要求或禁止严格模式指令</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/symbol-description">symbol-description</a></td><td>需要符号描述</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/vars-on-top">vars-on-top</a></td><td>要求所有的 var 声明出现在它们所在的作用域顶部</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/yoda">yoda</a></td><td>要求或禁止 Yoda 条件</td></tr></tbody></table><h3>layout &amp; formatting</h3><p>这些规则关心代码的外观而不是代码的执行方式。</p><table><thead><tr><th>标记</th><th>规则名称</th><th>规则说明</th></tr></thead><tbody><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:<!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> </td><td><a href="https://eslint.org/docs/rules/array-bracket-newline">array-bracket-newline</a></td><td>在数组开括号后和闭括号前强制换行</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/array-bracket-spacing">array-bracket-spacing</a></td><td>强制数组方括号中使用一致的空格</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/array-element-newline">array-element-newline</a></td><td>强制数组元素间出现换行</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/arrow-parens">arrow-parens</a></td><td>需要在箭头函数参数周围加上括号</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/arrow-spacing">arrow-spacing</a></td><td>在箭头函数中强制箭头前后的间距一致</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/block-spacing">block-spacing</a></td><td>禁止或强制在代码块中开括号前和闭括号后有空格</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/brace-style">brace-style</a></td><td>强制在代码块中使用一致的大括号风格</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/comma-dangle">comma-dangle</a></td><td>要求或禁止末尾逗号</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/comma-spacing">comma-spacing</a></td><td>强制在逗号前后使用一致的空格</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/comma-style">comma-style</a></td><td>强制使用一致的逗号风格</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/computed-property-spacing">computed-property-spacing</a></td><td>强制在计算的属性的方括号中使用一致的空格</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/dot-location">dot-location</a></td><td>在点之前和之后强制执行一致的换行符</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/eol-last">eol-last</a></td><td>要求或禁止文件末尾存在空行</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/func-call-spacing">func-call-spacing</a></td><td>要求或禁止在函数标识符和其调用之间有空格</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/function-call-argument-newline">function-call-argument-newline</a></td><td>在函数调用的参数之间强制换行</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/function-paren-newline">function-paren-newline</a></td><td>强制在函数括号内使用一致的换行</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/generator-star-spacing">generator-star-spacing</a></td><td>在生成器函数中强制在 * 运算符周围保持一致的间距</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/implicit-arrow-linebreak">implicit-arrow-linebreak</a></td><td>强制隐式返回的箭头函数体的位置</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/indent">indent</a></td><td>强制使用一致的缩进</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/jsx-quotes">jsx-quotes</a></td><td>强制在 JSX 属性中一致地使用双引号或单引号</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/key-spacing">key-spacing</a></td><td>强制在对象字面量的属性中键和值之间使用一致的间距</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/keyword-spacing">keyword-spacing</a></td><td>强制在关键字前后使用一致的空格</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/line-comment-position">line-comment-position</a></td><td>强制行注释的位置</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/linebreak-style">linebreak-style</a></td><td>强制使用一致的换行风格</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/lines-around-comment">lines-around-comment</a></td><td>要求在注释周围有空行</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/lines-between-class-members">lines-between-class-members</a></td><td>要求或禁止类成员之间出现空行</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/max-len">max-len</a></td><td>强制一行的最大长度</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/max-statements-per-line">max-statements-per-line</a></td><td>强制每一行中所允许的最大语句数量</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/multiline-ternary">multiline-ternary</a></td><td>要求或禁止在三元操作数中间换行</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/new-parens">new-parens</a></td><td>强制或禁止调用无参构造函数时有圆括号</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/newline-per-chained-call">newline-per-chained-call</a></td><td>要求方法链中每个调用都有一个换行符</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/no-extra-parens">no-extra-parens</a></td><td>不允许不必要的括号</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://eslint.org/docs/rules/no-mixed-spaces-and-tabs">no-mixed-spaces-and-tabs</a></td><td>禁止空格和 tab 的混合缩进</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/no-multi-spaces">no-multi-spaces</a></td><td>不允许多个空格</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/no-multiple-empty-lines">no-multiple-empty-lines</a></td><td>禁止出现多行空行</td></tr><tr><td></td><td><a href="https://eslint.org/docs/rules/no-tabs">no-tabs</a></td><td>禁用 tab</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/no-trailing-spaces">no-trailing-spaces</a></td><td>禁用行尾空格</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/no-whitespace-before-property">no-whitespace-before-property</a></td><td>禁止属性前有空白</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/nonblock-statement-body-position">nonblock-statement-body-position</a></td><td>强制单个语句的位置</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/object-curly-newline">object-curly-newline</a></td><td>强制大括号内换行符的一致性</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/object-curly-spacing">object-curly-spacing</a></td><td>强制在大括号中使用一致的空格</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/object-property-newline">object-property-newline</a></td><td>强制将对象的属性放在不同的行上</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/operator-linebreak">operator-linebreak</a></td><td>强制操作符使用一致的换行符</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/padded-blocks">padded-blocks</a></td><td>要求或禁止块内填充</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/padding-line-between-statements">padding-line-between-statements</a></td><td>要求或禁止在语句间填充空行</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/quotes">quotes</a></td><td>强制使用一致的反勾号、双引号或单引号</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/rest-spread-spacing">rest-spread-spacing</a></td><td>在 rest 和 spread 运算符及其表达式之间强制执行间距</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/semi">semi</a></td><td>要求或禁止使用分号代替 ASI</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/semi-spacing">semi-spacing</a></td><td>强制分号之前和之后使用一致的空格</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/semi-style">semi-style</a></td><td>强制分号的位置</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/space-before-blocks">space-before-blocks</a></td><td>强制在块之前使用一致的空格</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/space-before-function-paren">space-before-function-paren</a></td><td>强制在 function 的左括号之前使用一致的空格</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/space-in-parens">space-in-parens</a></td><td>强制在圆括号内使用一致的空格</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/space-infix-ops">space-infix-ops</a></td><td>要求操作符周围有空格</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/space-unary-ops">space-unary-ops</a></td><td>强制在一元操作符前后使用一致的空格</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/switch-colon-spacing">switch-colon-spacing</a></td><td>强制在 switch 的冒号左右有空格</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/template-curly-spacing">template-curly-spacing</a></td><td>要求或禁止模板字符串的嵌入表达式周围有空格</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/template-tag-spacing">template-tag-spacing</a></td><td>要求或禁止在模板标记和它们的字面量之间有空格</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/unicode-bom">unicode-bom</a></td><td>要求或禁止 Unicode 字节顺序标记 (BOM)</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/wrap-iife">wrap-iife</a></td><td>在立即的函数调用周围需要括号</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/wrap-regex">wrap-regex</a></td><td>要求正则表达式被括号括起来</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://eslint.org/docs/rules/yield-star-spacing">yield-star-spacing</a></td><td>要求或不允许在 yield<em> 表达式中的 </em> 周围有空格</td></tr></tbody></table><h2>eslint-plugin-react</h2><h3>react rules</h3><table><thead><tr><th>标记</th><th>规则名称</th><th>规则说明</th></tr></thead><tbody><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> </td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/boolean-prop-naming.md">react/boolean-prop-naming</a></td><td>强制布尔props的命名一致</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/button-has-type.md">react/button-has-type</a></td><td>禁止没有明确“类型”属性的“按钮”元素</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/default-props-match-prop-types.md">react/default-props-match-prop-types</a></td><td>强制所有 defaultProps 都是在 propTypes 中定义的，而不是“必需的”</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/destructuring-assignment.md">react/destructuring-assignment</a></td><td>强制使用props、状态和上下文的解构分配</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/display-name.md">react/display-name</a></td><td>防止在 React 组件定义中缺少 displayName</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/forbid-component-props.md">react/forbid-component-props</a></td><td>禁止组件上的某些 props</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/forbid-dom-props.md">react/forbid-dom-props</a></td><td>禁止 DOM 节点上的某些 props</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/forbid-elements.md">react/forbid-elements</a></td><td>禁止某些元素</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/forbid-foreign-prop-types.md">react/forbid-foreign-prop-types</a></td><td>禁止使用其他组件的 propTypes</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/forbid-prop-types.md">react/forbid-prop-types</a></td><td>禁止某些 propTypes</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/function-component-definition.md">react/function-component-definition</a></td><td>标准化功能组件的定义方式</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/hook-use-state.md">react/hook-use-state</a></td><td>确保 useState 挂钩值和 setter 变量的对称命名</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/iframe-missing-sandbox.md">react/iframe-missing-sandbox</a></td><td>在 iframe 元素上强制执行沙盒属性</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-access-state-in-setstate.md">react/no-access-state-in-setstate</a></td><td>在 setState 中访问 this.state 时报告</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-adjacent-inline-elements.md">react/no-adjacent-inline-elements</a></td><td>防止相邻的内联元素不被空格分隔</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-array-index-key.md">react/no-array-index-key</a></td><td>防止在 key 中使用数组索引</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-arrow-function-lifecycle.md">react/no-arrow-function-lifecycle</a></td><td>生命周期方法应该是原型上的方法，而不是类的</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-children-prop.md">react/no-children-prop</a></td><td>防止子类作为 props 通过</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-danger.md">react/no-danger</a></td><td>防止使用危险的 JSX props</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-danger-with-children.md">react/no-danger-with-children</a></td><td>报告 DOM 元素同时使用子元素和危险的 SetInnerHTML</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-deprecated.md">react/no-deprecated</a></td><td>防止使用过时的方法</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-did-mount-set-state.md">react/no-did-mount-set-state</a></td><td>防止在 componentDidMount 中使用 setState</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-did-update-set-state.md">react/no-did-update-set-state</a></td><td>防止在 componentDidUpdate 中使用 setState</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-direct-mutation-state.md">react/no-direct-mutation-state</a></td><td>防止 this.state 的直接突变</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-find-dom-node.md">react/no-find-dom-node</a></td><td>防止使用 findDOMNode</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-invalid-html-attribute.md">react/no-invalid-html-attribute</a></td><td>禁止具有无效值的属性</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-is-mounted.md">react/no-is-mounted</a></td><td>防止使用 isMounted</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-multi-comp.md">react/no-multi-comp</a></td><td>防止每个文件定义多个组件</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-namespace.md">react/no-namespace</a></td><td>强制在 React 元素中不使用命名空间</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-redundant-should-component-update.md">react/no-redundant-should-component-update</a></td><td>扩展 PureComponent 时标记 shouldComponentUpdate</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-render-return-value.md">react/no-render-return-value</a></td><td>防止使用 React.render 的返回值</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-set-state.md">react/no-set-state</a></td><td>防止使用 setState</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-string-refs.md">react/no-string-refs</a></td><td>阻止引用的字符串定义并阻止引用 this.refs</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-this-in-sfc.md">react/no-this-in-sfc</a></td><td>报告“this”在无状态组件中使用</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-typos.md">react/no-typos</a></td><td>防止常见的错别字</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-unescaped-entities.md">react/no-unescaped-entities</a></td><td>检测未转义的 HTML 实体，这些实体可能代表格式错误的标签</td></tr><tr><td>:heavy_check_mark: :wrench:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-unknown-property.md">react/no-unknown-property</a></td><td>防止使用未知的 DOM 属性</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-unsafe.md">react/no-unsafe</a></td><td>防止使用不安全的生命周期方法</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-unstable-nested-components.md">react/no-unstable-nested-components</a></td><td>防止在组件内部创建不稳定的组件</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-unused-class-component-methods.md">react/no-unused-class-component-methods</a></td><td>防止声明组件类的未使用方法</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-unused-prop-types.md">react/no-unused-prop-types</a></td><td>防止定义未使用的 prop 类型</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-unused-state.md">react/no-unused-state</a></td><td>防止定义未使用的状态字段</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-will-update-set-state.md">react/no-will-update-set-state</a></td><td>防止在 componentWillUpdate 中使用 setState</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/prefer-es6-class.md">react/prefer-es6-class</a></td><td>为 React 组件强制执行 ES5 或 ES6 类</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/prefer-exact-props.md">react/prefer-exact-props</a></td><td>推荐精确的 propType 定义</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/prefer-read-only-props.md">react/prefer-read-only-props</a></td><td>需要只读 props</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/prefer-stateless-function.md">react/prefer-stateless-function</a></td><td>强制将无状态组件编写为纯函数</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/prop-types.md">react/prop-types</a></td><td>防止在 React 组件定义中缺少 props 验证</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/react-in-jsx-scope.md">react/react-in-jsx-scope</a></td><td>使用 JSX 时防止缺少 React</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/require-default-props.md">react/require-default-props</a></td><td>为每个不是必需道具的 prop 强制执行 defaultProps 定义</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/require-optimization.md">react/require-optimization</a></td><td>强制 React 组件具有 shouldComponentUpdate 方法</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/require-render-return.md">react/require-render-return</a></td><td>强制 ES5 或 ES6 类在渲染函数中返回值</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/self-closing-comp.md">react/self-closing-comp</a></td><td>防止没有子组件的额外结束标签</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/sort-comp.md">react/sort-comp</a></td><td>强制执行组件方法顺序</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/sort-prop-types.md">react/sort-prop-types</a></td><td>强制 propTypes 声明按字母排序</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/state-in-constructor.md">react/state-in-constructor</a></td><td>ES6 类组件中的状态初始化应该在构造函数中</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/static-property-placement.md">react/static-property-placement</a></td><td>定义 React 组件静态属性的位置</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/style-prop-object.md">react/style-prop-object</a></td><td>强制样式 prop 值是一个对象</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/void-dom-elements-no-children.md">react/void-dom-elements-no-children</a></td><td>防止将子元素传递给 void DOM 元素 (例如 <code>&lt;br /&gt;</code>).</td></tr></tbody></table><h3>JSX rules</h3><table><thead><tr><th>标记</th><th>规则名称</th><th>规则说明</th></tr></thead><tbody><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:<!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> </td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-boolean-value.md">react/jsx-boolean-value</a></td><td>在 JSX 中强制布尔属性表示法</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-child-element-spacing.md">react/jsx-child-element-spacing</a></td><td>确保内联标签不会在它们之间没有空格的情况下呈现</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-closing-bracket-location.md">react/jsx-closing-bracket-location</a></td><td>验证 JSX 中的右括号位置</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-closing-tag-location.md">react/jsx-closing-tag-location</a></td><td>验证多行 JSX 的结束标记位置</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-curly-brace-presence.md">react/jsx-curly-brace-presence</a></td><td>仅当文字就足够时禁止不必要的 JSX 表达式，或者在 JSX 子级或属性中的文字上使用 JSX 表达式</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-curly-newline.md">react/jsx-curly-newline</a></td><td>在 jsx curly 中强制执行一致的换行符</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-curly-spacing.md">react/jsx-curly-spacing</a></td><td>在 JSX 属性中强制或禁止大括号内的空格</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-equals-spacing.md">react/jsx-equals-spacing</a></td><td>在 JSX 属性中禁止或强制等号周围有空格</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-filename-extension.md">react/jsx-filename-extension</a></td><td>限制可能包含 JSX 的文件扩展名</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-first-prop-new-line.md">react/jsx-first-prop-new-line</a></td><td>确保 JSX 中第一个属性的正确位置</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-fragments.md">react/jsx-fragments</a></td><td>为 React 片段强制执行简写或标准形式</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-handler-names.md">react/jsx-handler-names</a></td><td>在 JSX 中强制执行事件处理程序命名约定</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-indent.md">react/jsx-indent</a></td><td>验证 JSX 缩进</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-indent-props.md">react/jsx-indent-props</a></td><td>在 JSX 中验证 props 缩进</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-key.md">react/jsx-key</a></td><td>报告迭代器/集合文字中缺少的 key prop</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-max-depth.md">react/jsx-max-depth</a></td><td>验证 JSX 最大深度</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-max-props-per-line.md">react/jsx-max-props-per-line</a></td><td>在 JSX 中限制单行上的最大道具</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-newline.md">react/jsx-newline</a></td><td>要求或阻止在 jsx 元素和表达式之后换行</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-bind.md">react/jsx-no-bind</a></td><td>防止在 React 组件道具中使用 Function.prototype.bind 和箭头函数</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-comment-textnodes.md">react/jsx-no-comment-textnodes</a></td><td>标记子部分内的注释应放在大括号内</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-constructed-context-values.md">react/jsx-no-constructed-context-values</a></td><td>防止 JSX 上下文提供程序值采用会导致不必要的重新渲染的值</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-duplicate-props.md">react/jsx-no-duplicate-props</a></td><td>强制没有重复的 props</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-literals.md">react/jsx-no-literals</a></td><td>防止在 React 组件定义中使用字符串文字</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-script-url.md">react/jsx-no-script-url</a></td><td>禁止 <code>javascript:</code> URLs</td></tr><tr><td>:heavy_check_mark:<!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-target-blank.md">react/jsx-no-target-blank</a></td><td>禁止没有 <code>rel=&quot;noreferrer&quot;</code> 属性的<code>target=&quot;_blank&quot;</code></td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-undef.md">react/jsx-no-undef</a></td><td>禁止 JSX 中未声明的变量</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-useless-fragment.md">react/jsx-no-useless-fragment</a></td><td>禁止不必要的片段</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-one-expression-per-line.md">react/jsx-one-expression-per-line</a></td><td>JSX 中每行限制为一个表达式</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-pascal-case.md">react/jsx-pascal-case</a></td><td>对用户定义的 JSX 组件实施 PascalCase</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-props-no-multi-spaces.md">react/jsx-props-no-multi-spaces</a></td><td>禁止内联 JSX props之间有多个空格</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-props-no-spreading.md">react/jsx-props-no-spreading</a></td><td>防止 JSX prop 传递</td></tr><tr><td></td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-sort-default-props.md">react/jsx-sort-default-props</a></td><td>强制执行默认道具字母排序</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-sort-props.md">react/jsx-sort-props</a></td><td>强制 props 按字母排序</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-space-before-closing.md">react/jsx-space-before-closing</a></td><td>在 JSX 中的右括号之前验证间距</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-tag-spacing.md">react/jsx-tag-spacing</a></td><td>验证 JSX 开括号和右括号内和周围的空格</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-uses-react.md">react/jsx-uses-react</a></td><td>防止 React 被标记为未使用</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-uses-vars.md">react/jsx-uses-vars</a></td><td>防止 JSX 中使用的变量被标记为未使用</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-wrap-multilines.md">react/jsx-wrap-multilines</a></td><td>防止多行 JSX 周围缺少括号</td></tr></tbody></table><h2>@typescript-eslint/eslint-plugin</h2><h3>supported rules</h3><table><thead><tr><th>标记</th><th>规则名称</th><th>规则说明</th></tr></thead><tbody><tr><td>:heavy_check_mark:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/adjacent-overload-signatures.md"><code>@typescript-eslint/adjacent-overload-signatures</code></a></td><td>要求成员重载是连续的</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/array-type.md"><code>@typescript-eslint/array-type</code></a></td><td>需要使用<code>T[]</code>或者<code>Array&lt;T&gt;</code>用于数组</td></tr><tr><td>:heavy_check_mark:<!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> :bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/await-thenable.md"><code>@typescript-eslint/await-thenable</code></a></td><td>不允许等待不是 Thenable 的值</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/ban-ts-comment.md"><code>@typescript-eslint/ban-ts-comment</code></a></td><td>禁止<code>@ts-&lt;directive&gt;</code>使用注释或在指令后要求描述</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/ban-tslint-comment.md"><code>@typescript-eslint/ban-tslint-comment</code></a></td><td>禁止 <code>// tslint:&lt;rule-flag&gt; </code>使用注释</td></tr><tr><td>:heavy_check_mark: :wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/ban-types.md"><code>@typescript-eslint/ban-types</code></a></td><td>禁止使用特定类型</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/class-literal-property-style.md"><code>@typescript-eslint/class-literal-property-style</code></a></td><td>确保类上的文字以一致的样式公开</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/consistent-indexed-object-style.md"><code>@typescript-eslint/consistent-indexed-object-style</code></a></td><td>强制或禁止使用记录类型</td></tr><tr><td></td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/consistent-type-assertions.md"><code>@typescript-eslint/consistent-type-assertions</code></a></td><td>强制使用一致的类型断言</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/consistent-type-definitions.md"><code>@typescript-eslint/consistent-type-definitions</code></a></td><td>与类型定义一致 interface 或 type</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench: :bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/consistent-type-exports.md"><code>@typescript-eslint/consistent-type-exports</code></a></td><td>强制使用类型导出的一致使用</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/consistent-type-imports.md"><code>@typescript-eslint/consistent-type-imports</code></a></td><td>强制类型导入的一致使用</td></tr><tr><td></td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-function-return-type.md"><code>@typescript-eslint/explicit-function-return-type</code></a></td><td>需要函数和类方法的显式返回类型</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-member-accessibility.md"><code>@typescript-eslint/explicit-member-accessibility</code></a></td><td>要求对类属性和方法进行显式可访问性修饰符</td></tr><tr><td></td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-module-boundary-types.md"><code>@typescript-eslint/explicit-module-boundary-types</code></a></td><td>需要导出函数和类的公共类方法的显式返回和参数类型</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-delimiter-style.md"><code>@typescript-eslint/member-delimiter-style</code></a></td><td>接口和类型文字需要特定的成员分隔符样式</td></tr><tr><td></td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.md"><code>@typescript-eslint/member-ordering</code></a></td><td>要求一致的成员声明顺序</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/method-signature-style.md"><code>@typescript-eslint/method-signature-style</code></a></td><td>强制使用特定的方法签名语法</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/naming-convention.md"><code>@typescript-eslint/naming-convention</code></a></td><td>对代码库中的所有内容强制执行命名约定</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-base-to-string.md"><code>@typescript-eslint/no-base-to-string</code></a></td><td>要求 .toString() 仅在字符串化时提供有用信息的对象上调用</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-confusing-non-null-assertion.md"><code>@typescript-eslint/no-confusing-non-null-assertion</code></a></td><td>在可能令人困惑的位置禁止非空断言</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench: :bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-confusing-void-expression.md"><code>@typescript-eslint/no-confusing-void-expression</code></a></td><td>要求 void 类型的表达式出现在语句位置</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-dynamic-delete.md"><code>@typescript-eslint/no-dynamic-delete</code></a></td><td>禁止使用计算 key 表达式的删除运算符</td></tr><tr><td>:heavy_check_mark: :wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-empty-interface.md"><code>@typescript-eslint/no-empty-interface</code></a></td><td>禁止声明空接口</td></tr><tr><td>:heavy_check_mark: :wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-explicit-any.md"><code>@typescript-eslint/no-explicit-any</code></a></td><td>禁止使用 any 类型</td></tr><tr><td>:heavy_check_mark: :wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-extra-non-null-assertion.md"><code>@typescript-eslint/no-extra-non-null-assertion</code></a></td><td>禁止额外的非空断言</td></tr><tr><td></td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-extraneous-class.md"><code>@typescript-eslint/no-extraneous-class</code></a></td><td>禁止使用类作为命名空间</td></tr><tr><td>:heavy_check_mark:<!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> :bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-floating-promises.md"><code>@typescript-eslint/no-floating-promises</code></a></td><td>需要适当处理类似 Promise 的值</td></tr><tr><td>:heavy_check_mark:<!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> :bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-for-in-array.md"><code>@typescript-eslint/no-for-in-array</code></a></td><td>禁止使用 for-in 循环遍历数组</td></tr><tr><td>:heavy_check_mark: :wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-inferrable-types.md"><code>@typescript-eslint/no-inferrable-types</code></a></td><td>不允许对初始化为数字、字符串或布尔值的变量或参数进行显式类型声明</td></tr><tr><td></td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-invalid-void-type.md"><code>@typescript-eslint/no-invalid-void-type</code></a></td><td>禁止使用void泛型或返回类型之外的类型</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench: :bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-meaningless-void-operator.md"><code>@typescript-eslint/no-meaningless-void-operator</code></a></td><td>禁止 void 运算符，除非用于丢弃值</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-misused-new.md"><code>@typescript-eslint/no-misused-new</code></a></td><td>强制有效定义 <code>new</code> 和 <code>constructor</code></td></tr><tr><td>:heavy_check_mark:<!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> :bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-misused-promises.md"><code>@typescript-eslint/no-misused-promises</code></a></td><td>避免在不是为处理它们而设计的地方使用 Promise</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-namespace.md"><code>@typescript-eslint/no-namespace</code></a></td><td>禁止使用自定义 TypeScript 模块和命名空间</td></tr><tr><td></td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-non-null-asserted-nullish-coalescing.md"><code>@typescript-eslint/no-non-null-asserted-nullish-coalescing</code></a></td><td>不允许在空值合并运算符的左操作数中使用非空断言</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-non-null-asserted-optional-chain.md"><code>@typescript-eslint/no-non-null-asserted-optional-chain</code></a></td><td>不允许在可选链表达式之后使用非空断言</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-non-null-assertion.md"><code>@typescript-eslint/no-non-null-assertion</code></a></td><td>不允许使用为 ! 的后缀运算符的非空断言</td></tr><tr><td></td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-parameter-properties.md"><code>@typescript-eslint/no-parameter-properties</code></a></td><td>禁止在类构造函数中使用参数属性</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-redundant-type-constituents.md"><code>@typescript-eslint/no-redundant-type-constituents</code></a></td><td>禁止不执行任何操作或覆盖类型信息的联合和交集的成员</td></tr><tr><td></td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-require-imports.md"><code>@typescript-eslint/no-require-imports</code></a></td><td>不允许调用 require()</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-this-alias.md"><code>@typescript-eslint/no-this-alias</code></a></td><td>禁止混叠 <code>this</code></td></tr><tr><td></td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-type-alias.md"><code>@typescript-eslint/no-type-alias</code></a></td><td>禁止使用类型别名</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench: :bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-boolean-literal-compare.md"><code>@typescript-eslint/no-unnecessary-boolean-literal-compare</code></a></td><td>标记与布尔文字不必要的相等比较</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench: :bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-condition.md"><code>@typescript-eslint/no-unnecessary-condition</code></a></td><td>防止类型始终为真或始终为假的条件</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench: :bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-qualifier.md"><code>@typescript-eslint/no-unnecessary-qualifier</code></a></td><td>不需要命名空间限定符时发出警告</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench: :bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-type-arguments.md"><code>@typescript-eslint/no-unnecessary-type-arguments</code></a></td><td>强制在不需要时不使用类型参数</td></tr><tr><td>:heavy_check_mark: :wrench: :bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-type-assertion.md"><code>@typescript-eslint/no-unnecessary-type-assertion</code></a></td><td>如果类型断言不改变表达式的类型，则发出警告</td></tr><tr><td>:heavy_check_mark: :wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-type-constraint.md"><code>@typescript-eslint/no-unnecessary-type-constraint</code></a></td><td>禁止对泛型类型进行不必要的约束</td></tr><tr><td>:heavy_check_mark:<!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> :bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unsafe-argument.md"><code>@typescript-eslint/no-unsafe-argument</code></a></td><td>不允许调用具有任何类型值的函数</td></tr><tr><td>:heavy_check_mark:<!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> :bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unsafe-assignment.md"><code>@typescript-eslint/no-unsafe-assignment</code></a></td><td>不允许将任何分配给变量和属性</td></tr><tr><td>:heavy_check_mark:<!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> :bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unsafe-call.md"><code>@typescript-eslint/no-unsafe-call</code></a></td><td>不允许调用任何类型的值</td></tr><tr><td>:heavy_check_mark:<!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> :bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unsafe-member-access.md"><code>@typescript-eslint/no-unsafe-member-access</code></a></td><td>不允许成员访问任何类型的变量</td></tr><tr><td>:heavy_check_mark:<!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> :bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unsafe-return.md"><code>@typescript-eslint/no-unsafe-return</code></a></td><td>不允许从函数返回任何值</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> :wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-useless-empty-export.md"><code>@typescript-eslint/no-useless-empty-export</code></a></td><td>禁止不会更改模块文件中任何内容的空导出</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-var-requires.md"><code>@typescript-eslint/no-var-requires</code></a></td><td>不允许使用 require 语句，除了在 import 语句中</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench: :bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/non-nullable-type-assertion-style.md"><code>@typescript-eslint/non-nullable-type-assertion-style</code></a></td><td>在可能的情况下，优先使用非空断言而不是显式类型转换</td></tr><tr><td>:heavy_check_mark:  :wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-as-const.md"><code>@typescript-eslint/prefer-as-const</code></a></td><td>更喜欢使用 as const 文字类型</td></tr><tr><td></td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-enum-initializers.md"><code>@typescript-eslint/prefer-enum-initializers</code></a></td><td>首选初始化每个枚举成员值</td></tr><tr><td></td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-for-of.md"><code>@typescript-eslint/prefer-for-of</code></a></td><td>如果索引仅用于访问被迭代的数组，则首选 &quot;for-of&quot; 循环而不是标准 &quot;for&quot; 循环</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-function-type.md"><code>@typescript-eslint/prefer-function-type</code></a></td><td>使用函数类型而不是带有调用签名的接口</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench: :bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-includes.md"><code>@typescript-eslint/prefer-includes</code></a></td><td>强制在 includes 方法之上执行 indexOf 方法</td></tr><tr><td></td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-literal-enum-member.md"><code>@typescript-eslint/prefer-literal-enum-member</code></a></td><td>要求所有枚举成员都是文字值，以防止意外的枚举成员名称阴影问题</td></tr><tr><td>:heavy_check_mark:  :wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-namespace-keyword.md"><code>@typescript-eslint/prefer-namespace-keyword</code></a></td><td>要求使用 namespace 关键字而不是 module 关键字来声明自定义 TypeScript 模块</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-nullish-coalescing.md"><code>@typescript-eslint/prefer-nullish-coalescing</code></a></td><td>强制使用无效合并运算符而不是逻辑链接</td></tr><tr><td></td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-optional-chain.md"><code>@typescript-eslint/prefer-optional-chain</code></a></td><td>更喜欢使用简洁的可选链表达式而不是链式逻辑与</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> :wrench: :bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-readonly.md"><code>@typescript-eslint/prefer-readonly</code></a></td><td>要求将私有成员标记为 readonly 如果它们从未在构造函数之外修改过</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> :bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-readonly-parameter-types.md"><code>@typescript-eslint/prefer-readonly-parameter-types</code></a></td><td>要求将函数参数键入为只读，以防止输入意外突变</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench: :bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-reduce-type-parameter.md"><code>@typescript-eslint/prefer-reduce-type-parameter</code></a></td><td>调用时更喜欢使用类型参数 Array#reduce 而不是强制转换</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench: :bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-regexp-exec.md"><code>@typescript-eslint/prefer-regexp-exec</code></a></td><td>如果没有提供全局标志，则强制使用 RegExp#exec 代替 String#match</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench: :bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-return-this-type.md"><code>@typescript-eslint/prefer-return-this-type</code></a></td><td>仅在使用 this 作为返回类型时强制执行 this</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench: :bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-string-starts-ends-with.md"><code>@typescript-eslint/prefer-string-starts-ends-with</code></a></td><td>强制使用String#startsWithandString#endsWith而不是检查子字符串的其他等效方法</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-ts-expect-error.md"><code>@typescript-eslint/prefer-ts-expect-error</code></a></td><td>建议使用 @ts-expect-error 代替 @ts-ignore</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench: :bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/promise-function-async.md"><code>@typescript-eslint/promise-function-async</code></a></td><td>要求将任何返回 Promise 的函数或方法标记为异步</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/require-array-sort-compare.md"><code>@typescript-eslint/require-array-sort-compare</code></a></td><td>要求 Array#sort 调用始终提供一个 compareFunction</td></tr><tr><td>:heavy_check_mark: <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/restrict-plus-operands.md"><code>@typescript-eslint/restrict-plus-operands</code></a></td><td>当添加两个变量时，操作数必须都是数字类型或字符串类型</td></tr><tr><td>:heavy_check_mark: <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/restrict-template-expressions.md"><code>@typescript-eslint/restrict-template-expressions</code></a></td><td>强制模板文字表达式为字符串类型</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/sort-type-union-intersection-members.md"><code>@typescript-eslint/sort-type-union-intersection-members</code></a></td><td>强制类型联合/交集的成员按字母顺序排序</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench: :bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/strict-boolean-expressions.md"><code>@typescript-eslint/strict-boolean-expressions</code></a></td><td>限制布尔表达式中允许的类型</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/switch-exhaustiveness-check.md"><code>@typescript-eslint/switch-exhaustiveness-check</code></a></td><td>使用联合类型的开关中的详尽性检查</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/triple-slash-reference.md"><code>@typescript-eslint/triple-slash-reference</code></a></td><td>设置三斜杠指令与 ES6 作为导入声明样式的首选项</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/type-annotation-spacing.md"><code>@typescript-eslint/type-annotation-spacing</code></a></td><td>需要在类型注释周围保持一致的间距</td></tr><tr><td></td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/typedef.md"><code>@typescript-eslint/typedef</code></a></td><td>需要存在类型注释</td></tr><tr><td>:heavy_check_mark: <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/unbound-method.md"><code>@typescript-eslint/unbound-method</code></a></td><td>强制使用预期范围调用未绑定的方法</td></tr><tr><td></td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/unified-signatures.md"><code>@typescript-eslint/unified-signatures</code></a></td><td>警告可以通过使用联合或可选/休息参数统一为一个的任何两个重载</td></tr></tbody></table><h3>extension rules</h3><table><thead><tr><th>标记</th><th>规则名称</th><th>规则说明</th></tr></thead><tbody><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/brace-style.md"><code>@typescript-eslint/brace-style</code></a></td><td>对块执行一致的大括号样式</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/comma-dangle.md"><code>@typescript-eslint/comma-dangle</code></a></td><td>要求或不允许尾随号</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/comma-spacing.md"><code>@typescript-eslint/comma-spacing</code></a></td><td>强制逗号前后的间距一致</td></tr><tr><td></td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/default-param-last.md"><code>@typescript-eslint/default-param-last</code></a></td><td>强制将默认参数放在最后</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench: :bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/dot-notation.md"><code>@typescript-eslint/dot-notation</code></a></td><td>尽可能强制使用点表示法</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/func-call-spacing.md"><code>@typescript-eslint/func-call-spacing</code></a></td><td>要求或不允许函数标识符及其调用之间有间距</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/indent.md"><code>@typescript-eslint/indent</code></a></td><td>强制一致的缩进</td></tr><tr><td></td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/init-declarations.md"><code>@typescript-eslint/init-declarations</code></a></td><td>在变量声明中要求或禁止初始化</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/keyword-spacing.md"><code>@typescript-eslint/keyword-spacing</code></a></td><td>在关键字前后强制保持一致的间距</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/lines-between-class-members.md"><code>@typescript-eslint/lines-between-class-members</code></a></td><td>要求或禁止类成员之间有空行</td></tr><tr><td>:heavy_check_mark: :wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-array-constructor.md"><code>@typescript-eslint/no-array-constructor</code></a></td><td>禁止泛型 Array 构造函数</td></tr><tr><td></td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-dupe-class-members.md"><code>@typescript-eslint/no-dupe-class-members</code></a></td><td>禁止重复的类成员</td></tr><tr><td></td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-duplicate-imports.md"><code>@typescript-eslint/no-duplicate-imports</code></a></td><td>禁止重复导入</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-empty-function.md"><code>@typescript-eslint/no-empty-function</code></a></td><td>禁止空函数</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-extra-parens.md"><code>@typescript-eslint/no-extra-parens</code></a></td><td>禁止不必要的括号</td></tr><tr><td>:heavy_check_mark: :wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-extra-semi.md"><code>@typescript-eslint/no-extra-semi</code></a></td><td>禁止不必要的分号</td></tr><tr><td>:heavy_check_mark:<!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> :bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-implied-eval.md"><code>@typescript-eslint/no-implied-eval</code></a></td><td>禁止使用类似 eval() 方法</td></tr><tr><td></td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-invalid-this.md"><code>@typescript-eslint/no-invalid-this</code></a></td><td>禁止 this 关键字出现在类或类对象之外</td></tr><tr><td></td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-loop-func.md"><code>@typescript-eslint/no-loop-func</code></a></td><td>禁止在循环语句中包含不安全引用的函数声明</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-loss-of-precision.md"><code>@typescript-eslint/no-loss-of-precision</code></a></td><td>禁止失去精度的文字数字</td></tr><tr><td></td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-magic-numbers.md"><code>@typescript-eslint/no-magic-numbers</code></a></td><td>禁止魔法数字</td></tr><tr><td></td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-redeclare.md"><code>@typescript-eslint/no-redeclare</code></a></td><td>禁止变量重新声明</td></tr><tr><td></td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-restricted-imports.md"><code>@typescript-eslint/no-restricted-imports</code></a></td><td>禁止使用 import 加载指定模块</td></tr><tr><td></td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-shadow.md"><code>@typescript-eslint/no-shadow</code></a></td><td>禁止在外部作用域中声明的隐藏变量中的变量声明</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> :bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-throw-literal.md"><code>@typescript-eslint/no-throw-literal</code></a></td><td>不允许将文字作为异常抛出</td></tr><tr><td></td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unused-expressions.md"><code>@typescript-eslint/no-unused-expressions</code></a></td><td>禁止未使用的表达式</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unused-vars.md"><code>@typescript-eslint/no-unused-vars</code></a></td><td>禁止未使用的变量</td></tr><tr><td></td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-use-before-define.md"><code>@typescript-eslint/no-use-before-define</code></a></td><td>在定义之前禁止使用变量</td></tr><tr><td></td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-useless-constructor.md"><code>@typescript-eslint/no-useless-constructor</code></a></td><td>禁止不必要的构造函数</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/object-curly-spacing.md"><code>@typescript-eslint/object-curly-spacing</code></a></td><td>在大括号内强制保持一致的间距</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/padding-line-between-statements.md"><code>@typescript-eslint/padding-line-between-statements</code></a></td><td>要求或禁止语句之间的填充线</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/quotes.md"><code>@typescript-eslint/quotes</code></a></td><td>强制一致地使用反引号、双引号或单引号</td></tr><tr><td>:heavy_check_mark:<!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> :bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/require-await.md"><code>@typescript-eslint/require-await</code></a></td><td>禁止没有 await 表达式的异步函数</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench: :bulb:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/return-await.md"><code>@typescript-eslint/return-await</code></a></td><td>强制一致地返回等待的值</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/semi.md"><code>@typescript-eslint/semi</code></a></td><td>要求或禁止使用分号而不是 ASI</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/space-before-blocks.md"><code>@typescript-eslint/space-before-blocks</code></a></td><td>在块之前强制保持一致的间距</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/space-before-function-paren.md"><code>@typescript-eslint/space-before-function-paren</code></a></td><td>在函数括号之前强制保持一致的间距</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/space-infix-ops.md"><code>@typescript-eslint/space-infix-ops</code></a></td><td>此规则旨在确保中缀运算符周围有空格</td></tr></tbody></table><h2>stylelint</h2><h3>avoid errors</h3><table><thead><tr><th>标记</th><th>规则名称</th><th>规则说明</th></tr></thead><tbody><tr><td>:heavy_check_mark:<!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> </td><td><a href="https://stylelint.io/user-guide/rules/color-no-invalid-hex/"> <code>color-no-invalid-hex</code> </a></td><td>禁止无效的十六进制颜色</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://stylelint.io/user-guide/rules/font-family-no-duplicate-names/"> <code>font-family-no-duplicate-names</code> </a></td><td>不允许重复的字体系列名称。</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://stylelint.io/user-guide/rules/font-family-no-missing-generic-family-keyword/"> <code>font-family-no-missing-generic-family-keyword</code> </a></td><td>不允许在字体系列名称列表中缺少通用系列。</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://stylelint.io/user-guide/rules/named-grid-areas-no-invalid/"> <code>named-grid-areas-no-invalid</code> </a></td><td>不允许无效的命名网格区域。</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://stylelint.io/user-guide/rules/function-calc-no-unspaced-operator/"> <code>function-calc-no-unspaced-operator</code> </a></td><td>禁止在<code>calc中使用无空格运算符</code>功能。</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://stylelint.io/user-guide/rules/function-linear-gradient-no-nonstandard-direction/"> <code>function-linear-gradient-no-nonstandard-direction</code> </a></td><td>不允许方向值在根据<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient#Syntax">标准语法</a>无效的<code>linear-gradient（）</code>调用中。</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://stylelint.io/user-guide/rules/function-no-unknown/"> <code>function-no-unknown</code> </a></td><td>禁止未知函数。</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://stylelint.io/user-guide/rules/string-no-newline/"> <code>string-no-newline</code> </a></td><td>不允许（未转义的）字符串中的换行符。</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://stylelint.io/user-guide/rules/unit-no-unknown/"> <code>unit-no-unknown</code> </a></td><td>禁止未知单位。</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://stylelint.io/user-guide/rules/custom-property-no-missing-var-function/"> <code>custom-property-no-missing-var-function</code> </a></td><td>不允许缺少<code>用于自定义属性的var</code>函数。</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://stylelint.io/user-guide/rules/property-no-unknown/"> <code>property-no-unknown</code> </a></td><td>禁止未知属性。</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://stylelint.io/user-guide/rules/keyframe-declaration-no-important/"> <code>keyframe-declaration-no-important</code> </a></td><td>在关键帧声明中禁止使用<code>!important</code>。</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://stylelint.io/user-guide/rules/declaration-block-no-duplicate-custom-properties/"> <code>declaration-block-no-duplicate-custom-properties</code> </a></td><td>不允许重复的自定义声明块中的属性。</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://stylelint.io/user-guide/rules/declaration-block-no-duplicate-properties/"> <code>declaration-block-no-duplicate-properties</code> </a></td><td>不允许在声明块中重复属性。</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://stylelint.io/user-guide/rules/declaration-block-no-shorthand-property-overrides/"> <code>declaration-block-no-shorthand-property-overrides</code> </a></td><td>不允许速记属性覆盖相关的速记属性。</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://stylelint.io/user-guide/rules/block-no-empty/"> <code>block-no-empty</code> </a></td><td>禁止空块。</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://stylelint.io/user-guide/rules/selector-pseudo-class-no-unknown/"> <code>selector-pseudo-class-no-unknown</code> </a></td><td>禁止未知的伪类选择器。</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://stylelint.io/user-guide/rules/selector-pseudo-element-no-unknown/"> <code>selector-pseudo-element-no-unknown</code> </a></td><td>禁止未知的伪元素选择器。</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://stylelint.io/user-guide/rules/selector-type-no-unknown/"> <code>selector-type-no-unknown</code> </a></td><td>禁止未知类型选择器。</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://stylelint.io/user-guide/rules/media-feature-name-no-unknown/"> <code>media-feature-name-no-unknown</code> </a></td><td>禁止未知的媒体功能名称。</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://stylelint.io/user-guide/rules/at-rule-no-unknown/"> <code>at-rule-no-unknown</code> </a></td><td>禁止未知的 at-rules。</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://stylelint.io/user-guide/rules/comment-no-empty/"> <code>comment-no-empty</code> </a></td><td>禁止空注释。</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://stylelint.io/user-guide/rules/no-descending-specificity/"> <code>no-descending-specificity</code> </a></td><td>不允许较低特异性的选择器出现在覆盖较高特异性的选择器之后。</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://stylelint.io/user-guide/rules/no-duplicate-at-import-rules/"> <code>no-duplicate-at-import-rules</code> </a></td><td>禁止重复的<code>@import</code>规则在样式表中。</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://stylelint.io/user-guide/rules/no-duplicate-selectors/"> <code>no-duplicate-selectors</code> </a></td><td>不允许样式表中出现重复的选择器。</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://stylelint.io/user-guide/rules/no-empty-source/"> <code>no-empty-source</code> </a></td><td>禁止空源。</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://stylelint.io/user-guide/rules/no-invalid-double-slash-comments/"> <code>no-invalid-double-slash-comments</code> </a></td><td>禁止双斜线评论 ( <code> //...</code> ) 。</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://stylelint.io/user-guide/rules/no-invalid-position-at-import-rule/"> <code>no-invalid-position-at-import-rule</code> </a></td><td>不允许无效位置样式表中的<code>@import</code>规则。</td></tr></tbody></table><h3>enforce conventions</h3><table><thead><tr><th>标记</th><th>规则名称</th><th>规则说明</th></tr></thead><tbody><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:<!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> </td><td><a href="https://stylelint.io/user-guide/rules/alpha-value-notation/"> <code>alpha-value-notation</code> </a></td><td>指定 alpha 值的百分比或数字表示法。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/hue-degree-notation/"> <code>hue-degree-notation</code> </a></td><td>指定度数或角度表示法。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/color-function-notation/"> <code>color-function-notation</code> </a></td><td>为适用的颜色函数指定现代或传统符号。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/color-hex-alpha/"> <code>color-hex-alpha</code> </a></td><td>要求或禁止十六进制颜色的 alpha 通道。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/color-hex-length/"> <code>color-hex-length</code> </a></td><td>指定十六进制颜色的短符号或长符号。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/color-named/"> <code>color-named</code> </a></td><td>要求（在可能的情况下）或禁止命名颜色。</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://stylelint.io/user-guide/rules/color-no-hex/"> <code>color-no-hex</code> </a></td><td>禁止使用十六进制颜色。</td></tr><tr><td>:heavy_check_mark::wrench:</td><td><a href="https://stylelint.io/user-guide/rules/length-zero-no-unit/"> <code>length-zero-no-unit</code> </a></td><td>不允许使用零长度的单位。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/font-family-name-quotes/"> <code>font-family-name-quotes</code> </a></td><td>指定是否应该在字体类别周围使用引号。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/font-weight-notation/"> <code>font-weight-notation</code> </a></td><td>需要数字或命名（在可能的情况下）<code>font-weight</code>值。此外，当需要命名值时，只需要有效的名称。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/function-allowed-list/"> <code>function-allowed-list</code> </a></td><td>指定允许的函数列表。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/function-disallowed-list/"> <code>function-disallowed-list</code> </a></td><td>指定不允许使用的函数列表。</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://stylelint.io/user-guide/rules/function-url-no-scheme-relative/"> <code>function-url-no-scheme-relative</code> </a></td><td>禁止相对于方案的 url。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/function-url-quotes/"> <code>function-url-quotes</code> </a></td><td>要求或禁止 url 引用。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/function-url-scheme-allowed-list/"> <code>function-url-scheme-allowed-list</code> </a></td><td>指定允许的 url 方案列表.</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/function-url-scheme-disallowed-list/"> <code>function-url-scheme-disallowed-list</code> </a></td><td>指定不允许的 url 方案列表.</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/keyframes-name-pattern/"> <code>keyframes-name-pattern</code> </a></td><td>指定关键帧名称的模式。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/number-max-precision/"> <code>number-max-precision</code> </a></td><td>限制数字中允许的小数位数。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/time-min-milliseconds/"> <code>time-min-milliseconds</code> </a></td><td>指定时间值的最小毫秒数。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/unit-allowed-list/"> <code>unit-allowed-list</code> </a></td><td>指定允许的单元列表。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/unit-disallowed-list/"> <code>unit-disallowed-list</code> </a></td><td>指定不允许的单元列表。</td></tr><tr><td>:heavy_check_mark::wrench:</td><td><a href="https://stylelint.io/user-guide/rules/shorthand-property-no-redundant-values/"> <code>shorthand-property-no-redundant-values</code> </a></td><td>不允许在速记属性中出现冗余值。</td></tr><tr><td>:heavy_check_mark::wrench:</td><td><a href="https://stylelint.io/user-guide/rules/value-no-vendor-prefix/"> <code>value-no-vendor-prefix</code> </a></td><td>不允许值特应的前缀。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/custom-property-pattern/"> <code>custom-property-pattern</code> </a></td><td>指定自定义属性的模式。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/property-allowed-list/"> <code>property-allowed-list</code> </a></td><td>指定允许的属性列表。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/property-disallowed-list/"> <code>property-disallowed-list</code> </a></td><td>指定不允许的属性列表。</td></tr><tr><td>:heavy_check_mark::wrench:</td><td><a href="https://stylelint.io/user-guide/rules/property-no-vendor-prefix/"> <code>property-no-vendor-prefix</code> </a></td><td>不允许属性有特应的前缀。</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://stylelint.io/user-guide/rules/declaration-no-important/"> <code>declaration-no-important</code> </a></td><td>在声明中禁止<code>!important</code> 。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/declaration-property-unit-allowed-list/"> <code>declaration-property-unit-allowed-list</code> </a></td><td>指定允许的属性和声明中的单位对的列表。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/declaration-property-unit-disallowed-list/"> <code>declaration-property-unit-disallowed-list</code> </a></td><td>指定不允许的属性和声明中的单位对的列表。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/declaration-property-value-allowed-list/"> <code>declaration-property-value-allowed-list</code> </a></td><td>指定允许的属性和声明中的值对的列表。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/declaration-property-value-disallowed-list/"> <code>declaration-property-value-disallowed-list</code> </a></td><td>指定不允许的属性和声明中的值对的列表。</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://stylelint.io/user-guide/rules/declaration-block-no-redundant-longhand-properties/"> <code>declaration-block-no-redundant-longhand-properties</code> </a></td><td>禁止速记属性可以组合成一个速记属性。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/declaration-block-single-line-max-declarations/"> <code>declaration-block-single-line-max-declarations</code> </a></td><td>限制数量单行声明块中的声明。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/selector-attribute-name-disallowed-list/"> <code>selector-attribute-name-disallowed-list</code> </a></td><td>指定不允许的属性名称列表.</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/selector-attribute-operator-allowed-list/"> <code>selector-attribute-operator-allowed-list</code> </a></td><td>指定允许的属性运算符列表.</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/selector-attribute-operator-disallowed-list/"> <code>selector-attribute-operator-disallowed-list</code> </a></td><td>指定不允许的属性运算符列表.</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/selector-attribute-quotes/"> <code>selector-attribute-quotes</code> </a></td><td>要求或禁止属性值的引号。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/selector-class-pattern/"> <code>selector-class-pattern</code> </a></td><td>指定类选择器的模式。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/selector-combinator-allowed-list/"> <code>selector-combinator-allowed-list</code> </a></td><td>指定允许的组合器列表。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/selector-combinator-disallowed-list/"> <code>selector-combinator-disallowed-list</code> </a></td><td>指定不允许的组合器列表。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/selector-disallowed-list/"> <code>selector-disallowed-list</code> </a></td><td>指定不允许的选择器列表。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/selector-id-pattern/"> <code>selector-id-pattern</code> </a></td><td>指定 ID 选择器的模式。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/selector-max-attribute/"> <code>selector-max-attribute</code> </a></td><td>限制选择器中属性选择器的数量。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/selector-max-class/"> <code>selector-max-class</code> </a></td><td>限制选择器中的类数。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/selector-max-combinators/"> <code>selector-max-combinators</code> </a></td><td>限制选择器中组合器的数量。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/selector-max-compound-selectors/"> <code>selector-max-compound-selectors</code> </a></td><td>限制选择器中复合选择器的数量。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/selector-max-id/"> <code>selector-max-id</code> </a></td><td>限制选择器中 ID 选择器的数量。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/selector-max-pseudo-class/"> <code>selector-max-pseudo-class</code> </a></td><td>限制选择器中伪类的数量。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/selector-max-specificity/"> <code>selector-max-specificity</code> </a></td><td>限制选择器的特异性。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/selector-max-type/"> <code>selector-max-type</code> </a></td><td>限制选择器中的类型数。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/selector-max-universal/"> <code>selector-max-universal</code> </a></td><td>限制选择器中通用选择器的数量。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/selector-nested-pattern/"> <code>selector-nested-pattern</code> </a></td><td>指定嵌套在规则中的规则选择器的模式。</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://stylelint.io/user-guide/rules/selector-no-qualifying-type/"> <code>selector-no-qualifying-type</code> </a></td><td>不允许按类型限定选择器。</td></tr><tr><td>:heavy_check_mark::wrench:</td><td><a href="https://stylelint.io/user-guide/rules/selector-no-vendor-prefix/"> <code>selector-no-vendor-prefix</code> </a></td><td>禁止选择器的特应前缀。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/selector-pseudo-class-allowed-list/"> <code>selector-pseudo-class-allowed-list</code> </a></td><td>指定允许的伪类选择器的列表。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/selector-pseudo-class-disallowed-list/"> <code>selector-pseudo-class-disallowed-list</code> </a></td><td>指定不允许的伪类选择器的列表。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/selector-pseudo-element-allowed-list/"> <code>selector-pseudo-element-allowed-list</code> </a></td><td>指定允许的伪元素选择器的列表。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/selector-pseudo-element-colon-notation/"> <code>selector-pseudo-element-colon-notation</code> </a></td><td>为适用的伪元素指定单冒号或双冒号表示法。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/selector-pseudo-element-disallowed-list/"> <code>selector-pseudo-element-disallowed-list</code> </a></td><td>指定不允许的伪元素选择器的列表。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/rule-selector-property-disallowed-list/"> <code>rule-selector-property-disallowed-list</code> </a></td><td>指定不允许的属性规则中的选择器的列表。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/media-feature-name-allowed-list/"> <code>media-feature-name-allowed-list</code> </a></td><td>指定允许的媒体功能名字的列表。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/media-feature-name-disallowed-list/"> <code>media-feature-name-disallowed-list</code> </a></td><td>指定不允许的媒体功能名字的列表。</td></tr><tr><td>:heavy_check_mark::wrench:</td><td><a href="https://stylelint.io/user-guide/rules/media-feature-name-no-vendor-prefix/"> <code>media-feature-name-no-vendor-prefix</code> </a></td><td>禁止使用供应商前缀用于媒体功能名称。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/media-feature-name-value-allowed-list/"> <code>media-feature-name-value-allowed-list</code> </a></td><td>指定一个允许的媒体功能名称和值对的列表。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/custom-media-pattern/"> <code>custom-media-pattern</code> </a></td><td>指定自定义媒体查询名称的模式。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/at-rule-allowed-list/"> <code>at-rule-allowed-list</code> </a></td><td>指定允许的 at-rules 列表。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/at-rule-disallowed-list/"> <code>at-rule-disallowed-list</code> </a></td><td>指定不允许的 at-rules 列表。</td></tr><tr><td>:heavy_check_mark::wrench:</td><td><a href="https://stylelint.io/user-guide/rules/at-rule-no-vendor-prefix/"> <code>at-rule-no-vendor-prefix</code> </a></td><td>禁止在规则中使用特应前缀。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/at-rule-property-required-list/"> <code>at-rule-property-required-list</code> </a></td><td>指定所需属性的一个规则的列表。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/comment-pattern/"> <code>comment-pattern</code> </a></td><td>指定注释模式。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/comment-word-disallowed-list/"> <code>comment-word-disallowed-list</code> </a></td><td>指定评论中不允许使用的单词列表。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/max-nesting-depth/"> <code>max-nesting-depth</code> </a></td><td>限制嵌套深度。</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://stylelint.io/user-guide/rules/no-irregular-whitespace/"> <code>no-irregular-whitespace</code> </a></td><td>不允许不规则的空白。</td></tr><tr><td>:heavy_check_mark:</td><td><a href="https://stylelint.io/user-guide/rules/no-unknown-animations/"> <code>no-unknown-animations</code> </a></td><td>禁止未知动画。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/unicode-bom/"> <code>unicode-bom</code> </a></td><td>要求或禁止 Unicode BOM。</td></tr></tbody></table><h3>stylistic issues</h3><table><thead><tr><th>标记</th><th>规则名称</th><th>规则说明</th></tr></thead><tbody><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/value-keyword-case/"> <code>value-keyword-case</code> </a></td><td>为关键字值指定小写或大写。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/function-name-case/"> <code>function-name-case</code> </a></td><td>指定函数名称的小写或大写。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/custom-property-empty-line-before/"> <code>custom-property-empty-line-before</code> </a></td><td>要求或禁止在自定义属性。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/selector-type-case/"> <code>selector-type-case</code> </a></td><td>为类型选择器指定小写或大写。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/rule-empty-line-before/"> <code>rule-empty-line-before</code> </a></td><td>要求或禁止在规则之前有一个空行 .</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/at-rule-empty-line-before/"> <code>at-rule-empty-line-before</code> </a></td><td>要求或禁止在前面有空行规则。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/comment-empty-line-before/"> <code>comment-empty-line-before</code> </a></td><td>要求或不允许在注释前有一个空行.</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/comment-whitespace-inside/"> <code>comment-whitespace-inside</code> </a></td><td>要求或禁止注释标记内部的空格。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/color-hex-case/"> <code>color-hex-case</code> </a></td><td>为十六进制颜色指定小写或大写。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/function-comma-newline-after/"> <code>function-comma-newline-after</code> </a></td><td>在函数的逗号后需要换行符或不允许空格。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/function-comma-newline-before/"> <code>function-comma-newline-before</code> </a></td><td>在函数的逗号之前需要换行符或不允许空格。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/function-comma-space-after/"> <code>function-comma-space-after</code> </a></td><td>在逗号后需要一个空格或不允许空格功能。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/function-comma-space-before/"> <code>function-comma-space-before</code> </a></td><td>在逗号之前需要一个空格或不允许空格功能。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/function-max-empty-lines/"> <code>function-max-empty-lines</code> </a></td><td>限制函数中相邻空行的数量。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/function-parentheses-newline-inside/"> <code>function-parentheses-newline-inside</code> </a></td><td>需要换行符或不允许在内部有空格函数的括号。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/function-parentheses-space-inside/"> <code>function-parentheses-space-inside</code> </a></td><td>要求单个空格或不允许在函数的括号。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/function-whitespace-after/"> <code>function-whitespace-after</code> </a></td><td>要求或禁止函数后有空格。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/number-leading-zero/"> <code>number-leading-zero</code> </a></td><td>对于小于 1 的小数，要求或不允许前导零.</td></tr><tr><td>:heavy_check_mark::wrench:</td><td><a href="https://stylelint.io/user-guide/rules/number-no-trailing-zeros/"> <code>number-no-trailing-zeros</code> </a></td><td>不允许数字中出现尾随零。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/string-quotes/"> <code>string-quotes</code> </a></td><td>在字符串周围指定单引号或双引号。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/unit-case/"> <code>unit-case</code> </a></td><td>为单位指定小写或大写。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/value-list-comma-newline-after/"> <code>value-list-comma-newline-after</code> </a></td><td>后面需要换行符或不允许空格值列表的逗号。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/value-list-comma-newline-before/"> <code>value-list-comma-newline-before</code> </a></td><td>需要换行符或之前不允许空格值列表的逗号。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/value-list-comma-space-after/"> <code>value-list-comma-space-after</code> </a></td><td>需要一个空格或不允许空格在值列表的逗号之后。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/value-list-comma-space-before/"> <code>value-list-comma-space-before</code> </a></td><td>需要一个空格或不允许空格在值列表的逗号之前。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/value-list-max-empty-lines/"> <code>value-list-max-empty-lines</code> </a></td><td>限制相邻空行数在值列表中。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/property-case/"> <code>property-case</code> </a></td><td>为属性指定小写或大写。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/declaration-bang-space-after/"> <code>declaration-bang-space-after</code> </a></td><td>在声明。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/declaration-bang-space-before/"> <code>declaration-bang-space-before</code> </a></td><td>在声明。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/declaration-colon-newline-after/"> <code>declaration-colon-newline-after</code> </a></td><td>在声明的冒号后需要换行符或不允许空格。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/declaration-colon-space-after/"> <code>declaration-colon-space-after</code> </a></td><td>在冒号后需要一个空格或不允许空格声明。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/declaration-colon-space-before/"> <code>declaration-colon-space-before</code> </a></td><td>在冒号前需要一个空格或不允许空格声明。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/declaration-empty-line-before/"> <code>declaration-empty-line-before</code> </a></td><td>要求或禁止声明前有空行.</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/declaration-block-semicolon-newline-after/"> <code>declaration-block-semicolon-newline-after</code> </a></td><td>需要换行符或后面不允许有空格声明块的分号。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/declaration-block-semicolon-newline-before/"> <code>declaration-block-semicolon-newline-before</code> </a></td><td>需要换行符或之前不允许空格声明块的分号。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/declaration-block-semicolon-space-after/"> <code>declaration-block-semicolon-space-after</code> </a></td><td>需要一个空格或不允许空格在声明块的分号之后。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/declaration-block-semicolon-space-before/"> <code>declaration-block-semicolon-space-before</code> </a></td><td>需要一个空格或不允许空格在声明块的分号之前。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/declaration-block-trailing-semicolon/"> <code>declaration-block-trailing-semicolon</code> </a></td><td>要求或禁止在声明块中使用尾随分号。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/block-closing-brace-empty-line-before/"> <code>block-closing-brace-empty-line-before</code> </a></td><td>要求或禁止块右大括号前的空行。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/block-closing-brace-newline-after/"> <code>block-closing-brace-newline-after</code> </a></td><td>后面需要换行符或不允许空格块的右大括号。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/block-closing-brace-newline-before/"> <code>block-closing-brace-newline-before</code> </a></td><td>需要换行符或之前不允许有空格块的右大括号。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/block-closing-brace-space-after/"> <code>block-closing-brace-space-after</code> </a></td><td>需要一个空格或不允许空格在块的右大括号之后。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/block-closing-brace-space-before/"> <code>block-closing-brace-space-before</code> </a></td><td>需要一个空格或不允许空格在块的右大括号之前。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/block-opening-brace-newline-after/"> <code>block-opening-brace-newline-after</code> </a></td><td>在左大括号后需要一个换行符块。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/block-opening-brace-newline-before/"> <code>block-opening-brace-newline-before</code> </a></td><td>需要换行符或之前不允许空格块的左大括号。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/block-opening-brace-space-after/"> <code>block-opening-brace-space-after</code> </a></td><td>需要一个空格或不允许空格在块的左大括号之后。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/block-opening-brace-space-before/"> <code>block-opening-brace-space-before</code> </a></td><td>需要一个空格或不允许空格在块的左大括号之前。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/selector-attribute-brackets-space-inside/"> <code>selector-attribute-brackets-space-inside</code> </a></td><td>需要一个空格或不允许空格在属性选择器内的括号内。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/selector-attribute-operator-space-after/"> <code>selector-attribute-operator-space-after</code> </a></td><td>需要一个空格或不允许空格after 属性选择器中的运算符。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/selector-attribute-operator-space-before/"> <code>selector-attribute-operator-space-before</code> </a></td><td>需要一个空格或不允许空格在属性选择器中的运算符之前。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/selector-combinator-space-after/"> <code>selector-combinator-space-after</code> </a></td><td>在选择器。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/selector-combinator-space-before/"> <code>selector-combinator-space-before</code> </a></td><td>在选择器。</td></tr><tr><td>:heavy_check_mark::wrench:</td><td><a href="https://stylelint.io/user-guide/rules/selector-descendant-combinator-no-non-space/"> <code>selector-descendant-combinator-no-non-space</code> </a></td><td>禁止非选择器的后代组合符的空格字符。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/selector-max-empty-lines/"> <code>selector-max-empty-lines</code> </a></td><td>限制选择器中相邻空行的数量。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/selector-pseudo-class-case/"> <code>selector-pseudo-class-case</code> </a></td><td>为伪类选择器指定小写或大写。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/selector-pseudo-class-parentheses-space-inside/"> <code>selector-pseudo-class-parentheses-space-inside</code> </a></td><td>需要一个伪类选择器中括号内的空格或不允许空格。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/selector-pseudo-element-case/"> <code>selector-pseudo-element-case</code> </a></td><td>为伪元素选择器指定小写或大写。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/selector-list-comma-newline-after/"> <code>selector-list-comma-newline-after</code> </a></td><td>后面需要换行符或不允许空格选择器列表的逗号。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/selector-list-comma-newline-before/"> <code>selector-list-comma-newline-before</code> </a></td><td>需要换行符或之前不允许空格选择器列表的逗号。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/selector-list-comma-space-after/"> <code>selector-list-comma-space-after</code> </a></td><td>需要一个空格或不允许空格在选择器列表的逗号之后。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/selector-list-comma-space-before/"> <code>selector-list-comma-space-before</code> </a></td><td>需要一个空格或不允许空格在选择器列表的逗号之前。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/media-feature-colon-space-after/"> <code>media-feature-colon-space-after</code> </a></td><td>需要一个空格或不允许空格媒体功能中的冒号后。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/media-feature-colon-space-before/"> <code>media-feature-colon-space-before</code> </a></td><td>需要一个空格或不允许空格媒体功能中的冒号之前。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/media-feature-name-case/"> <code>media-feature-name-case</code> </a></td><td>为媒体功能名称指定小写或大写.</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/media-feature-parentheses-space-inside/"> <code>media-feature-parentheses-space-inside</code> </a></td><td>需要一个空格或不允许空格在媒体功能内的括号内。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/media-feature-range-operator-space-after/"> <code>media-feature-range-operator-space-after</code> </a></td><td>需要一个媒体功能中范围运算符后的空格或不允许空格。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/media-feature-range-operator-space-before/"> <code>media-feature-range-operator-space-before</code> </a></td><td>需要一个媒体功能中范围运算符之前的空格或不允许空格。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/media-query-list-comma-newline-after/"> <code>media-query-list-comma-newline-after</code> </a></td><td>需要换行符或在媒体查询列表的逗号后禁止空格。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/media-query-list-comma-newline-before/"> <code>media-query-list-comma-newline-before</code> </a></td><td>需要换行符或禁止媒体查询列表的逗号前有空格。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/media-query-list-comma-space-after/"> <code>media-query-list-comma-space-after</code> </a></td><td>需要一个媒体查询列表的逗号后有空格或不允许空格。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/media-query-list-comma-space-before/"> <code>media-query-list-comma-space-before</code> </a></td><td>需要一个媒体查询列表的逗号前有空格或不允许空格。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/at-rule-name-case/"> <code>at-rule-name-case</code> </a></td><td>指定小写或大写的 at-rules 名称。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/at-rule-name-newline-after/"> <code>at-rule-name-newline-after</code> </a></td><td>在 at-rule 之后需要一个换行符名字。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/at-rule-name-space-after/"> <code>at-rule-name-space-after</code> </a></td><td>在 at 之后需要一个空格规则名称。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/at-rule-semicolon-newline-after/"> <code>at-rule-semicolon-newline-after</code> </a></td><td>分号后需要换行符规则。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/at-rule-semicolon-space-before/"> <code>at-rule-semicolon-space-before</code> </a></td><td>需要一个空格或不允许空格在at-rules的分号之前。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/indentation/"> <code>indentation</code> </a></td><td>指定缩进。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/linebreaks/"> <code>linebreaks</code> </a></td><td>指定 unix 或 windows 换行符。</td></tr><tr><td> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- -->:wrench:</td><td><a href="https://stylelint.io/user-guide/rules/max-empty-lines/"> <code>max-empty-lines</code> </a></td><td>限制相邻空行的数量。</td></tr><tr><td></td><td><a href="https://stylelint.io/user-guide/rules/max-line-length/"> <code>max-line-length</code> </a></td><td>限制一行的长度。</td></tr><tr><td>:heavy_check_mark::wrench:</td><td><a href="https://stylelint.io/user-guide/rules/no-eol-whitespace/"> <code>no-eol-whitespace</code> </a></td><td>禁止行尾空格。</td></tr><tr><td>:heavy_check_mark::wrench:</td><td><a href="https://stylelint.io/user-guide/rules/no-missing-end-of-source-newline/"> <code>no-missing-end-of-source-newline</code> </a></td><td>不允许缺少结尾-of-source 换行符。</td></tr><tr><td>:heavy_check_mark::wrench:</td><td><a href="https://stylelint.io/user-guide/rules/no-empty-first-line/"> <code>no-empty-first-line</code> </a></td><td>不允许空的第一行。</td></tr><tr><td>:heavy_check_mark::wrench:</td><td><a href="https://stylelint.io/user-guide/rules/no-extra-semicolons/"><code>no-extra-semicolons</code> </a></td><td>不允许使用额外的分号。</td></tr></tbody></table>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[代码风格指南]]></title>
            <link>https://concisejs.github.io/blog/code-style-guide</link>
            <guid>code-style-guide</guid>
            <pubDate>Wed, 21 Apr 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[本文档是 ConciseJS 针对 CSS/SCSS 、 JavaScript 、 JSX 、 TypeScript 等语言的编程风格指南，所包含的内容不仅涉及格式的美学问题，还涉及一些数据类型的约定或编码标准，从而可以最大化的帮助开发者规避某些错误、确保项目的一致性和代码的可读性。]]></description>
            <content:encoded><![CDATA[<p>本文档是 ConciseJS 针对 CSS/SCSS 、 JavaScript 、 JSX 、 TypeScript 等语言的编程风格指南，所包含的内容不仅涉及格式的美学问题，还涉及一些数据类型的约定或编码标准，从而可以最大化的帮助开发者规避某些错误、确保项目的一致性和代码的可读性。</p><h2>通用</h2><ul><li>使用 2 个空格来缩进。</li></ul><h2>CSS/SCSS</h2><h2>JavaScript</h2><h3>注释</h3><div title="[object Object]"></div><div title="[object Object]"></div><div title="所有注释开头都空一格，方便阅读。"><pre><code class="language-javascript">// bad
//这里是单行注释
const isValid = true;
/**
 *这里是多行注释
 */
const example = function showExample() {}

// good
// 这里是单行注释
const isValid = true;
/**
 * 这里是多行注释
 */
const example = function showExample() {}
</code></pre></div><h3>空格</h3><div title="在大括号前面空一格。"><pre><code class="language-javascript">// bad
const example = function showExample(){}

// good
const example = function showExample() {}
</code></pre></div><div title="[object Object]"><pre><code class="language-javascript">// bad
if(isValid) {
  example ();
  // ...
}

// good
if (isValid) {
  example();
  // ...
}

// bad
function example () {}

// good
function example() {}
</code></pre></div><div title="运算符之间使用一个空格隔开。"><pre><code class="language-javascript">// bad
const res=x+y;

// good
const res = x + y;
</code></pre></div><div title="[object Object]"><pre><code class="language-javascript">// bad
const arr = [ 1,2,3 ];
console.log(arr[ 0 ]);

// good
const arr = [1, 2, 3];
console.log(arr[0]);

// bad
const obj = {a:1,b:2};

// good
const obj = { a: 1, b: 2 };

// bad
function example() {console.log(&#x27;...&#x27;);}

// good
function example() { console.log(&#x27;...&#x27;); }
</code></pre></div><div title="合理使用空行。"></div><h3>命名</h3><div title="避免使用一个字母或无意义的名称命名，尽量让命名有意义。"><pre><code class="language-javascript">// bad
const arr = [];
function q() {}
const temp = true;

// good
const items = [];
function query() {}
const hasVal = true;
</code></pre></div><div title="使用小驼峰命名法来命名对象、函数、实例。使用大驼峰命名法来命名类。"><pre><code class="language-javascript">// bad
const my_object = {};
function MyFunction() {}

// good
const myObject = {};
function myFunction() {}

// bad
class point {}

// good
class Point {}
</code></pre></div><div title="不要使用前置或后置下划线。"><pre><code class="language-javascript">// bad
const _firstName = &#x27;&#x27;;
const __firstName__ = &#x27;&#x27;;

// good
const firstName = &#x27;&#x27;;
</code></pre></div><h3>声明</h3><ul><li>使用 <code>let</code> 或 <code>const</code> 代替 <code>var</code> 。<blockquote><p>这样做不会导致全局变量，避免污染全局命名空间。</p></blockquote></li><li>所有的声明都使用 <code>const</code> ，如果需要对变量重新赋值，使用 <code>let</code> 。<blockquote><p>这样做能确保你不会改变你的初始值。重复引用会导致 bug ，并使代码变得难以理解。</p></blockquote></li></ul><div title="[object Object]" content="这种方式很容易去声明新的变量，也可以在调试代码时单步调试每个声明语句，而不是一下跳过所有声明。"><pre><code class="language-javascript">// bad
const items = getItems(), isAdd = true, name = &#x27;admin&#x27;

// good
const item = getItems()
const isAdd = true
const name = &#x27;admin&#x27;
</code></pre></div><div title="在你需要的地方声明变量，但是要放在合理的位置。" content="[object Object]"><pre><code class="language-javascript">// bad
function checkName(hasName) {
  const name = getName();
  if (hasName) {
    return false;
  }
  if (name === &#x27;test&#x27;) {
    return false;
  }
  return true;
}

// good
function checkName(hasName) {
  if (hasName) {
    return false;
  }
  // 在需要的时候分配
  const name = getName();
  if (name === &#x27;test&#x27;) {
    return false;
  }
  return true;
}
</code></pre></div><div title="不要使用链式声明变量。" content="链式声明变量会创建隐式全局变量。"><pre><code class="language-javascript">// bad
function example() {
  let a = b = c = 1;
}
example();
console.log(a); // error: a is not defined
console.log(b); // 1
console.log(c); // 1

// good
function example() {
  let a = 1;
  let b = 1;
  let c = 1;
}
example();
console.log(a); // error: a is not defined
console.log(b); // error: a is not defined
console.log(c); // error: a is not defined

// `const` 也是如此
</code></pre></div><div title="不允许存在未使用的变量。" content="一旦声明了未使用的变量，很像是有种功能未实现或未完成的感觉，容易给代码阅读者造成迷惑。"><pre><code class="language-javascript">// bad
let name = &#x27;string&#x27;;
let count = 1;
if (true) {
  count += 1;
}

// good
let count = 1;
if (true) {
  count += 1;
}
</code></pre></div><h3>对象</h3><div title="使用字面值创建对象。" content="这是创建对象最简单的方式。"><pre><code class="language-javascript">// bad
const obj = new Object();

// good
const obj = {};
</code></pre></div><div title="使用计算属性名创建一个带有动态属性名的对象。" content="这可以在一个地方定义所有对象属性。"><pre><code class="language-javascript">function getKey(val) {
  return `a key named ${val}`
}

// bad
const obj = {
  id: 5,
  name: &#x27;string&#x27;
};
obj[getKey(&#x27;test&#x27;)] = true;

// good
const obj = {
  id: 5,
  name: &#x27;string&#x27;,
  [getKey(&#x27;test&#x27;)]: true
};
</code></pre></div><div title="[object Object]" content="这种方式更易读，不仅优化了代码高亮，也更容易被许多 JS 引擎优化。"><pre><code class="language-javascript">// bad
const obj = {
  &#x27;one&#x27;: 1,
  &#x27;two&#x27;: 2,
  &#x27;data-blah&#x27;: 5
};

// good
const obj = {
  one: 1,
  two: 2,
  &#x27;data-blah&#x27;: 5
};
</code></pre></div><div title="用对象方法简写。" content="这样写的更少且可读性更高。"><pre><code class="language-javascript">// bad
const atom = {
  value: 1,
  addValue: function(val) {
    return atom.value + val;
  }
};

// good
const atom = {
  value: 1,
  addValue(val) {
    return atom.value + val;
  }
};
</code></pre></div><div title="用属性值简写。" content="这样写的更少且可读性更高。"><pre><code class="language-javascript">const username = &#x27;admin&#x27;;
const password = &#x27;123456&#x27;;

// bad
const obj = {
  username: username,
  password: password
};

// good
const obj = {
  username,
  password
};
</code></pre></div><div title="[object Object]" content="[object Object]"><pre><code class="language-javascript">// very bad
const original = {a: 1, b: 2};
const copy = Object.assign(original, {c: 3}); // original =&gt; {a: 1, b: 2, c: 3}
delete copy.a; // original =&gt; {b: 2, c: 3}

// bad
const original = {a: 1, b: 2};
const copy = Object.assign({}, original, {c: 3});

// good
const original = {a: 1, b: 2};
const copy = {...original, c: 3};
</code></pre></div><div title="用对象的解构赋值来获取和使用对象某个或多个属性值。" content="解构使您不必为这些属性创建临时引用，并且避免重复引用对象。重复引用对象将造成代码重复、增加阅读次数、提高犯错概率等。"><pre><code class="language-javascript">// bad
function getFullName(user) {
  const firstName = user.firstName;
  const lastName = user.lastName;
  return `${firstName} ${lastName}`;
}

// good
function getFullName(user) {
  const {firstName, lastName} = user;
  return `${firstName} ${lastName}`;
}

// best
function getFullName({firstName, lastName}) {
  return `${firstName} ${lastName}`;
}

// rest 解构运算符
const original = {a: 1, b: 2, c: 3};
const {a, ...copy} = original; // copy =&gt; {b: 2, c: 3}
</code></pre></div><h3>数组</h3><div title="使用字面量创建数组。" content="这是创建数组最简单的方式。"><pre><code class="language-javascript">// bad
const items = new Array();

// good
const items = [];
</code></pre></div><div title="[object Object]"><pre><code class="language-javascript">const items = [];

// bad
items[items.length] = &#x27;string&#x27;;

// good
items.push(&#x27;string&#x27;);
</code></pre></div><div title="使用扩展运算符做数组浅拷贝，类似上面的对象浅拷贝。"><pre><code class="language-javascript">const items = [];

// bad
const len = items.length;
const itemsCopy = [];
for (let i = 0; i &lt; len; i++) {
  itemsCopy[i] = items[i];
}

// good
const itemsCopy = [...items];
</code></pre></div><div title="获取数组的元素时，在合适的情况下，优先使用数组解构赋值。"><pre><code class="language-javascript">const arr = [1, 2, 3, 4];

// bad
const first = arr[0];
const second = arr[1];

// good
const [first, second] = arr;
</code></pre></div><div title="[object Object]"><pre><code class="language-javascript">const foo = document.querySelectorAll(&#x27;.foo&#x27;);

// good
const nodes = Array.from(foo);

// best
const nodes = [...foo];
</code></pre></div><div title="[object Object]"><pre><code class="language-javascript">const arrLike = { 0: &#x27;foo&#x27;, 1: &#x27;bar&#x27;, 2: &#x27;baz&#x27;, length: 3 };

// bad
const arr = Array.prototype.slice.call(arrLike);

// good
const arr = Array.from(arrLike);
</code></pre></div><h3>字符串</h3><div title="[object Object]"><pre><code class="language-jsx">// bad
const name = &quot;Jack Sparrow&quot;;
// bad - 模板字符串应该包含插入文字或换行
const name = `Jack Sparrow`;

// good
const name = &#x27;Jack Sparrow&#x27;;
</code></pre></div><div title="当需要动态生成字符串时，使用模板字符串而不是字符串拼接。"><pre><code class="language-javascript">// bad
function sayHi(name) {
  return &#x27;How are your, &#x27; + name + &#x27;?&#x27;;
}
// bad
function sayHi(name) {
  return [&#x27;How are your, &#x27;, name, &#x27;?&#x27;].join();
}

// good
function sayHi(name) {
  return `How are you, ${name}`;
}
</code></pre></div><div title="[object Object]"></div><div title="不要使用不必要的转义符。"><pre><code class="language-javascript">// bad
const name = &#x27;\&quot;Jack Sparrow\&quot;&#x27;;

// good
const name = &#x27;&quot;Jack Sparrow&quot;&#x27;;

// best
const saySomething = `my name is &#x27;${name}&#x27;`;
</code></pre></div><h3>函数</h3><div title="使用命名函数表达式而不是函数声明。" content="函数声明会发生提升；匿名函数表达式会导致难以追踪错误。"><pre><code class="language-javascript">// bad - 函数声明会发生提升
function example() {
  // ...
}

// bad - 匿名函数表达式会导致难以追踪错误
const example = function() {
  // ...
}

// good
const example = function showExample() {
  // ...
}
</code></pre></div><div title="[object Object]" content="[object Object]"><pre><code class="language-javascript">// bad
const example = function showExample(name, options, arguments) {
  // ...
}

// good
const example = function showExample(name, options, args) {
  // ...
}
</code></pre></div><div title="用默认参数语法，而不是在函数里对参数重新赋值。"><pre><code class="language-javascript">// bad
const example = function showExample(opts) {
  opts = opts || {};
  // ...
}

// good
const example = function showExample(opts = {}) {
  // ...
}
</code></pre></div><div title="把默认参数放在最后。"><pre><code class="language-javascript">// bad
const example = function showExample(opts = {}, name) {
  // ...
}

// good
const example = function showExample(name, opts = {}) {
  // ...
}
</code></pre></div><div title="不要修改参数，不要对参数重新赋值。" content="操作参数对象对原始调用者会产生意想不到的副作用。不要改变参数的数据结构，保留参数原始值和数据结构。"><pre><code class="language-javascript">// bad
const example = function showExample(opts = {}) {
  opts.key = 1;
  // ...
}

// good
const example = function showExample(opts = {}) {
  const key = opts.key ? opts.key : 1;
    // ...
}

// bad
function example(a) {
  a = 1;
  // ...
}

// good
function example(a) {
  const b = a ?? 1;
  // ...
}
</code></pre></div><div title="函数定义部分要有空格。"><pre><code class="language-javascript">// bad
const a = function(){}
const a = function() {}
const a = function (){}

// good
const a = function () {}
const example = function showExample() {}
</code></pre></div><div title="函数包含多个返回值时，优先使用对象，而不是数组。" content="使用时，就不需要严格对照返回值的顺序"><pre><code class="language-javascript">// bad
function example() {
  // ...
  return [left, right, top, bottom];
}
// 使用时，需要严格对照返回值的顺序
const [left, _, top] = example();

// good
function example() {
  // ...
  return {left, right, top, bottom};
}
const {left, top} = example();
</code></pre></div><h3>箭头函数</h3><div title="在回调函数里，使用箭头函数。"><pre><code class="language-javascript">// bad
[1, 2, 3].map(function (x) {
  const y = x + 1;
  return x * y;
});

// good
[1, 2, 3].map((x) =&gt; {
  const y = x + 1;
  return x * y;
});

// best
[1, 2, 3].map((x) =&gt; x * (x + 1));
</code></pre></div><div title="箭头函数的参数总是使用小括号包裹在。" content="这样做使代码更清晰一致，并且当想要添加或删除参数时比较省事。"><pre><code class="language-javascript">// bad
[1, 2, 3].map(x =&gt; x * x);

// good
[1, 2, 3].map((x) =&gt; x * x);
</code></pre></div><div title="使箭头函数体有一个清晰的返回。"><pre><code class="language-javascript">// bad
[1, 2, 3].map((x) =&gt;
  x * x);
[1, 2, 3].map((x) =&gt;
  (x * x));

// good
[1, 2, 3].map((x) =&gt; x * x);
[1, 2, 3].map((x) =&gt; (
  x * x
));
</code></pre></div><h3>比较运算符</h3><div title="[object Object]"><pre><code class="language-javascript">// bad
if (id == 1) {
  // ...
}

// good
if (id === 1) {
  // ...
}
</code></pre></div><div title="布尔值要用缩写，而字符串和数字要明确使用比较运算符。"><pre><code class="language-javascript">// bad
if (isValid === true) {
  // ...
}
if (name) {
  // ...
}
if (items.length) {
  // ...
}

// good
if (isValid) {}
if (name !== &#x27;&#x27;) {}
if (items.length &gt; 0) {}
</code></pre></div><div title="[object Object]"><pre><code class="language-javascript">// bad
const name = a &gt; b ? &#x27;string1&#x27; : x &gt; y ? &#x27;string2&#x27; : &#x27;string3&#x27;;

// good
const name = a &gt; b ? &#x27;string1&#x27; : &#x27;string2&#x27;;

// good
let name;
if (a &gt; b) {
  name = &#x27;string1&#x27;;
} else if (x &gt; y) {
  name = &#x27;string2&#x27;;
} else {
  name = &#x27;string3&#x27;;
}
</code></pre></div><div title="避免使用不必要的三元表达式。"><pre><code class="language-javascript">// bad
const str = a ? a : b;
const isValid = a ? true : false;
const isValid = a ? false : true;

// good
const str = a || b;
const isValid = !!a;
const isValid = !a;
</code></pre></div><div title="[object Object]"><pre><code class="language-javascript">// bad
if (a || b &amp;&amp; c) {
  // ...
}

// good
if (a || (b &amp;&amp; c)) {
  // ...
}

// good
const res = a + b * c;
</code></pre></div><h2>JSX</h2><h3>组件命名</h3><ul><li>用 <code>.jsx</code> 作为组件扩展名。</li><li>用大驼峰的书写方式作为文件名，且文件名与导出模块（ <code>export default</code> ）的名字相同。</li></ul><h3>props 命名</h3><div title="组件的属性名避免与 HTML 属性名相同。"><pre><code class="language-jsx">// bad
&lt;MyComponent style=&quot;dark&quot; /&gt;

// good
&lt;MyComponent mode=&quot;dark&quot; /&gt;
</code></pre></div><ul><li>prop 的定义应该尽量详细，至少需要指定其类型。</li><li>使用小驼峰命名法命名 prop 。</li></ul><h2>TypeScript</h2>]]></content:encoded>
        </item>
    </channel>
</rss>